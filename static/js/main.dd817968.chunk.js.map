{"version":3,"sources":["coronadash/data/countries.tsv","Utils/StringUtils.js","Utils/UIHelper.js","Components/card/Card.js","Components/nextPrevious/nextPrevious.tsx","Components/pieChart2/PieChartFullOption.tsx","Components/coronamap/Legend.js","Components/coronamap/CoronaMapView.js","Components/panelchart/Panel.js","Utils/DataHelper.js","Components/region/Region.js","Components/toggleButton/ToggleBtn.js","coronadash/container/Container.js","App.js","Service/covidNinja/NinjaService.ts","serviceWorker.js","index.js"],"names":["module","exports","deleteSpecialChar","string","split","join","entity","num","toString","replace","getRadiusCases","cases","rayon","getRadiusDeath","value","separator","end","duration","d","context","checkToggleBTn","StringUtils","stat","deaths","checkZoneDesease","Card","totalConfirmed","activeCases","recovered","totalDeaths","this","props","covid19","totalInfo","countryClicked","data","Array","isArray","length","filter","elt","Country","active","todayCases","todayRecovered","todayDeaths","style","marginLeft","className","aria-hidden","uihelper","Component","NextPrevious","color","onClick","clickPrevious","clickNext","React","PieChartFullOption","useState","selected","setSelected","undefined","hovered","setHovered","map","entry","i","fontFamily","fontSize","radius","PieChart","defaultProps","lineWidth","segmentsStyle","transition","cursor","segmentsShift","index","animate","label","dataEntry","Math","round","percentage","labelPosition","labelStyle","fill","opacity","pointerEvents","_","onMouseOver","onMouseOut","Legend","svg","d3","append","attr","text","svgMap","node","getBoundingClientRect","height","width","top","zIndex","id","CoronaMapView","viewBox","borderColor","mergeMorrocanSahara","g","jsonData","morocco","objects","countries","geometries","morrocanSahara","toBeMerged","datum","merge","calculatePath","getMoroccoCountryColor","on","clickOnCountry","morrocanTodayCases","c","country","getCountryColor","addCountriesName","worldData","selectAll","includes","properties","name","enter","path","centroid","drawMap","markDesease","e","trim","dailyNewCase","dailyCase","addZoom","call","scaleExtent","translateExtent","extent","closePanel","zoomed","transform","markerRed","markersBlack","placeLabel","contextDesease","scaledRadius","scaleRadius","k","contextDeaths","calculatedRadius","UIHelper","projection","geoMercator","center","scale","translate","precision","gGlobal","drawSvgWrapper","wrapper","PureComponent","Panel","handleClick","contains","target","handleClickOutside","tagName","getPanelParagraph","field","margin","fontWeight","document","addEventListener","removeEventListener","x","y","ref","left","maxHeight","maxWidth","src","countryInfo","flag","tabIndex","right","getStatByPays","countryData","world","constructData","pays","statCovid19","result","forEach","coordinate","longitude","latitude","object","push","Region","drawCircles","markers","empty","drawZoneByContext","drawDimondPrincess","DataHelper","dataFiltered","filterCountriesByContext","getMarkerId","clickOnCircle","getCx","getCy","getClassByContext","dataSorted","TotalDeaths","sort","e1","e2","totalDeath1Int","parseInt","ActiveCases","activeCase1Int","getRadius","getNodeColor","media","remove","Container","getData","TotalRecovered","position","getPositionPanel","setState","panelOpacity","panelZindex","sendSvgToBackground","onclick","panelStatDim","leftsideDim","headerDim","pageX","pageY","positionPanel","sendSvgToFrontPage","closePanelDetails","initGlobalStat","constructView","state","switchToggleBtn","currentState","mapopacity","switchZoneDesease","pieOpacity","countries110","feature","features","then","response","error","zoneDeaths","App","onclickCountry","countryFiltered","dataset","getPieData","totalCases","getGlobalStat","totalStatistics","isLoaded","bind","fetch","json","pieData","console","log","overflow","paddingRight","window","screen","title","href","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd817968.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countries.9d6b49a0.tsv\";","  //verify string not empty\r\n  const isNotEmpty = entity => {\r\n   return entity != \"\" && entity != null;\r\n   //    return entity != null && entity.trim() != \"\";\r\n\r\n  };\r\n\r\n  //\r\n  const deleteSpecialChar = (string)=>{\r\n    if(typeof string != \"string\"){\r\n      throw \"formatStringToNumber is applied only on string format\"\r\n    }\r\n    var splitted = string.split(`,`).join('');\r\n\r\n    return splitted;\r\n  }\r\n\r\n  const stringVirSepToNumber = (string)=>{\r\n    var stringWithoutSpecChar = deleteSpecialChar(string);\r\n    return parseInt(stringWithoutSpecChar,10);\r\n  }\r\n\r\n  const formatNumberToString = (num) =>{\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n\r\nexport default { isNotEmpty,deleteSpecialChar,stringVirSepToNumber,formatNumberToString};","\r\nimport React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport StringUtils from './StringUtils';\r\n\r\n/** example \"16.25\" -> 16,25 + counter  */\r\nconst buildCountUpByStringValue = (value)=>{\r\n    return (\r\n      <CountUp\r\n        separator=\",\"\r\n        end={value}\r\n        duration={0.5}\r\n      ></CountUp>\r\n    );\r\n  }\r\n\r\nconst   calculateRadius = (d, context) => {\r\n  let cases;\r\n  if (context.checkToggleBTn) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.deaths);\r\n    return getRadiusDeath(cases)\r\n  } else if (context.checkZoneDesease) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.cases);\r\n    return getRadiusCases(cases)\r\n  }\r\n};\r\n\r\nconst getRadiusCases = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 10;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 10000) {\r\n    let r = (cases / 10000) * 20;\r\n    rayon = r;\r\n  } else if (10000 <= cases && cases < 60000) {\r\n    let r = (cases / 50000) * 50;\r\n    rayon = r;\r\n  }else if (60000 <= cases && cases < 100000) {\r\n    let r = (cases / 100000) * 60;\r\n    rayon = r;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nconst getRadiusDeath = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 2000) {\r\n    let r = (cases / 2000) * 20;\r\n    rayon = r;\r\n  } else if (2000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 22;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 15000) {\r\n    let r = (cases / 5000) * 25;\r\n    rayon = r;\r\n  }else{\r\n    rayon = 30;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nexport default{buildCountUpByStringValue,calculateRadius}","import React, { Component } from \"react\";\r\nimport uihelper from \"../../Utils/UIHelper\";\r\nimport \"./Card.css\";\r\n\r\nexport default class Card extends Component {\r\n  render() {\r\n    const {covid19,totalInfo} = this.props;\r\n    const countryClicked = this.props.countryClicked;\r\n\r\n    let data = covid19;\r\n    let totalStatistics;\r\n    if (Array.isArray(data) && data.length) {\r\n      //FIXME : refactor this code\r\n      totalStatistics = data.filter((elt) => { return elt.Country == \"Total:\" })[7]\r\n    }\r\n    let totalConfirmed;\r\n    let activeCases;\r\n    let recovered;\r\n    let totalDeaths;\r\n    if (countryClicked) {\r\n      totalConfirmed = countryClicked.cases;\r\n      activeCases = countryClicked.active;\r\n      recovered = countryClicked.recovered;\r\n      totalDeaths = countryClicked.deaths;\r\n    } else {\r\n      //FIXME\r\n      totalConfirmed = totalInfo.cases;\r\n      activeCases = totalInfo.todayCases;\r\n      recovered = totalInfo.todayRecovered;\r\n      totalDeaths = totalInfo.todayDeaths;\r\n    }\r\n    //\r\n    return (\r\n      <div style={{ marginLeft: 10 + \"px\" }}>\r\n        <div className=\"card\">\r\n          <div className=\"red-title\"> <i className=\"fa fa-globe\" aria-hidden=\"true\"></i> Total Confirmed</div>\r\n    <div className=\"red-content\">{uihelper.buildCountUpByStringValue(totalConfirmed)}</div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"orange-title\"><i className=\"fa fa-ambulance\" aria-hidden=\"true\"></i> Active cases</div>\r\n          <div className=\"orange-content\">{uihelper.buildCountUpByStringValue(activeCases)}</div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"green-title\"><i className=\"fa fa-heart\" aria-hidden=\"true\"></i> Recovered</div>\r\n          <div className=\"green-content\">{uihelper.buildCountUpByStringValue(recovered)}</div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"black-title\"><i className=\"fa fa-heartbeat\" aria-hidden=\"true\"></i> Total Deaths</div>\r\n          <div className=\"black-content\">{uihelper.buildCountUpByStringValue(totalDeaths)}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // buildCountUpByStringValue = (valueStr)=>{\r\n  //   return (\r\n  //     <CountUp\r\n  //       separator=\",\"\r\n  //       end={StringUtils.stringVirSepToNumber(valueStr)}\r\n  //     ></CountUp>\r\n  //   );\r\n  // }\r\n\r\n}\r\n","import * as React from \"react\";\r\ninterface Props{\r\n    clickPrevious : any;\r\n    clickNext : any;\r\n}\r\ninterface State{\r\n\r\n}\r\nexport class NextPrevious extends React.Component<Props,State>{\r\n\r\n    constructor(props : Props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button className=\"btn\" style={{color:\"white\"}} onClick={this.props.clickPrevious}><i className=\"fa fa-caret-left\"/></button>\r\n                 Today \r\n                <button className=\"btn\" style={{color:\"white\"}} onClick={this.props.clickNext}> <i className=\"fa fa-caret-right\" aria-hidden=\"true\"/></button>\r\n            </div>\r\n        )\r\n        \r\n        \r\n    }\r\n}","import React, { useState, ComponentProps } from 'react';\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\n\r\n\r\ntype Props = {\r\n  data: ComponentProps<typeof PieChart>['data'];\r\n  countryClicked : {};\r\n};\r\n\r\nfunction PieChartFullOption(props: Props) {\r\n  const [selected, setSelected] = useState<number | undefined>(0);\r\n  const [hovered, setHovered] = useState<number | undefined>(undefined);\r\n\r\n  const data = props.data.map((entry, i) => {\r\n    if (hovered === i) {\r\n      return {\r\n        ...entry,\r\n        color: 'grey',\r\n      };\r\n    }\r\n    return entry;\r\n  });\r\n\r\n  const lineWidth = 60;\r\n\r\n  return (\r\n    <PieChart\r\n      style={{\r\n        fontFamily:\r\n          '\"Nunito Sans\", -apple-system, Helvetica, Arial, sans-serif',\r\n        fontSize: '8px',\r\n      }}\r\n      data={data}\r\n      radius={PieChart.defaultProps.radius - 6}\r\n      lineWidth={60}\r\n      segmentsStyle={{ transition: 'stroke .3s', cursor: 'pointer' }}\r\n      segmentsShift={(index) => (index === selected ? 6 : 1)}\r\n      animate\r\n      label={({ dataEntry }) => Math.round(dataEntry.percentage) + '%'}\r\n      labelPosition={100 - lineWidth / 2}\r\n      labelStyle={{\r\n        fill: '#fff',\r\n        opacity: 0.75,\r\n        pointerEvents: 'none',\r\n      }}\r\n      onClick={(_, index) => {\r\n        setSelected(index === selected ? undefined : index);\r\n      }}\r\n      onMouseOver={(_, index) => {\r\n        setHovered(index);\r\n      }}\r\n      onMouseOut={() => {\r\n        setHovered(undefined);\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PieChartFullOption;","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport \"./Legend.css\";\r\n\r\nexport default class Legend extends Component {\r\n  componentDidMount() {\r\n    var svg = d3.select(\"#legend\")\r\n    // Handmade legend\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",10).attr(\"r\", 6).style(\"fill\", \"#6f8d43\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",30).attr(\"r\", 6).style(\"fill\", \"#71c7ec\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",50).attr(\"r\", 6).style(\"fill\", \"#65b3d4\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",70).attr(\"r\", 6).style(\"fill\", \"#386376\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",90).attr(\"r\", 6).style(\"fill\", \"#16272f\")\r\n    // svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",110).attr(\"r\", 6).style(\"fill\", \"#386376\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",110).attr(\"r\", 6).style(\"fill\", \"rgba(218, 223, 225, 1)\")\r\n\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 10).text(\"no new cases\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 30).text(\"< 2k\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 50).text(\"2k - 5K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 70).text(\"5K - 15K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 90).text(\">15k\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    // svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 110).text(\"30K - 100K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 110).text(\"infos not available\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    let svgMap = d3.selectAll('#content').node().getBoundingClientRect();\r\n    return (\r\n      <div className=\"legend\" style = {{height:'30%',width:'15%',top : svgMap.height*.6,zIndex:1}}>\r\n        <svg  id = \"legend\" style = {{height:'100%',width:'100%'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as d3 from \"d3\";\r\nimport React, { PureComponent } from \"react\";\r\nimport { merge } from \"topojson-client\";\r\nimport UIHelper from \"../../Utils/UIHelper\";\r\nimport \"./CoronaMapViewCss.css\";\r\nimport Legend from \"./Legend.js\";\r\n\r\nexport default class CoronaMapView extends PureComponent {\r\n  //Constantes\r\n\r\n  width = \"100%\";\r\n  height = \"100%\";\r\n  viewBox = `0 0 800 400`;\r\n  borderColor = \"blue\";\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.jsonData.length != 0) {\r\n      //Draw svg Wrapper\r\n      var svg = this.drawSvgWrapper();\r\n      var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n      //Draw Path from worldData\r\n      var g = this.drawMap(gGlobal, this.props.worldData);\r\n      //Merge morrocan sahara\r\n      this.mergeMorrocanSahara(g);\r\n      //country names\r\n      this.addCountriesName(g,this.props.worldData);\r\n      //add zoom\r\n      var wrapper = d3.select(\"#content\");\r\n      this.addZoom(wrapper);\r\n    }\r\n  }\r\n\r\n  mergeMorrocanSahara = g => {\r\n    //merge Morocco\r\n    var jsonData = this.props.jsonData;\r\n    //Moroccan Sahara id = 732\r\n    //Morocco id = 504\r\n    var morocco = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 504\r\n    );\r\n    var morrocanSahara = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 732\r\n    );\r\n    var toBeMerged = [morocco[0], morrocanSahara[0]];\r\n    //\r\n    g.append(\"path\")\r\n      .datum(merge(jsonData, toBeMerged))\r\n      .attr(\"class\", \"country\")\r\n      .attr(\"d\", d => this.calculatePath(d))\r\n      .attr(\"fill\", this.getMoroccoCountryColor(this.props.covid19))\r\n      .on(\"click\", (d) => {\r\n        this.props.clickOnCountry()\r\n      })\r\n  };\r\n\r\n   getMoroccoCountryColor = (data) => {\r\n    const moroccoData = data.filter(c => c.country == \"Morocco\");\r\n    let morrocanTodayCases = moroccoData[0].todayCases;\r\n    return this.getCountryColor(morrocanTodayCases); \r\n   }\r\n\r\n   addCountriesName = (g, worldData) => {\r\n    g.selectAll(\".place-label\")\r\n      .data(\r\n        worldData.filter((d) => {\r\n          return [\r\n            \"Morocco\",\r\n            \"USA\",\r\n            \"China\",\r\n            \"Brazil\",\r\n            \"Australia\",\r\n            \"Russia\",\r\n            \"South Africa\",\r\n            \"Chile\",\r\n            \"Mexico\",\r\n            \"Iran\",\r\n            \"Germany\",\r\n            \"Nigeria\",\r\n            \"Egypt\",\r\n            \"India\",  \r\n            \"Greenland\",\r\n            \"France\"\r\n          ].includes(d.properties.name);\r\n        })\r\n      )\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"place-label\")\r\n      .attr(\"x\", (d) => {\r\n        return this.path().centroid(d)[0];\r\n      })\r\n      .attr(\"y\", (d) => {\r\n        return this.path().centroid(d)[1];\r\n      })\r\n      .text((d) => {\r\n        return d.properties.name;\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Legend></Legend>\r\n    );\r\n  }\r\n\r\n\r\n  //Draw svg wrapper for map\r\n  drawSvgWrapper() {\r\n    //Construct Body\r\n    var body = d3.select(\"#mapWW\")\r\n    //Construct SVG\r\n    var svg = body\r\n      .append(\"svg\")\r\n      .attr(\"class\", \"svg\")\r\n      .attr(\"id\", \"content\")\r\n      .attr(\"width\", this.width)\r\n      // .attr(\"height\", window.screen.height +'px')\r\n      .attr(\"viewBox\", this.viewBox)\r\n      ;\r\n    return svg;\r\n  }\r\n\r\n  //Draw the world Map\r\n  drawMap = (node, worldData) => {\r\n      var g = node\r\n        .append(\"g\")\r\n        .attr(\"id\", \"worldMap\")\r\n        .attr(\"className\", \"countries\");\r\n      g.selectAll(\"path\")\r\n        .data(worldData)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"key\", (d, i) => `path-${i}`)\r\n        .attr(\"d\", d => this.calculatePath(d))\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", (d) => {\r\n          return this.markDesease(d)\r\n        })\r\n        .on(\"click\", (d) => {\r\n          this.props.clickOnCountry(d);\r\n        })\r\n      return g;\r\n\r\n  };\r\n\r\n  //Color land \r\n  markDesease = (d) => {\r\n    let elt = this.props.covid19.filter((e) => {\r\n      let countryTrimmed = e.country ? e.country.trim() : \"\";\r\n\r\n      return countryTrimmed == d.properties.name\r\n    })\r\n    if (elt[0]) {\r\n      let dailyNewCase = elt[0].todayCases;\r\n      return this.getCountryColor(dailyNewCase);\r\n\r\n    } else {\r\n      return `rgba(218, 223, 225, 1)`\r\n    }\r\n  }\r\n\r\n  //Get country color range rgba(255,255,255)\r\n  getCountryColor = (dailyCase) => {\r\n    if(dailyCase == 0){\r\n      return '#6f8d43'\r\n    } \r\n    \r\n    /*else if (0 < dailyCase && dailyCase <= 100) {\r\n      return '#71c7ec'\r\n    } else if (100 <= dailyCase && dailyCase < 200) {\r\n      return '#65b3d4'\r\n    } else if (200 <= dailyCase && dailyCase < 500) {\r\n      return '#5a9fbc'\r\n    } else if (500 <= dailyCase && dailyCase < 1000) {\r\n      return '#4f8ba5'\r\n    } else if (1000 <= dailyCase && dailyCase < 5000) {\r\n      return '#43778d'\r\n    } */\r\n    else if (0 < dailyCase && dailyCase <= 2000) {\r\n      return '#71c7ec'\r\n    }\r\n    else if (2000 < dailyCase && dailyCase <= 5000) {\r\n      return '#65b3d4'\r\n    }\r\n    else if (5000 <= dailyCase && dailyCase < 15000) {\r\n      return '#386376'\r\n    } else if (15000 <= dailyCase) {\r\n      return '#16272f'\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  //Add zoom\r\n  addZoom = svg => {\r\n    const map = d3.select(\".svg\");\r\n    const width = map.node().getBoundingClientRect().width;\r\n    const height = width / 3;\r\n\r\n    svg.call(d3.zoom()\r\n    .scaleExtent([1, 50])\r\n    .translateExtent([[0,0], [width, height]])\r\n    .extent([[0, 0], [width, height]])\r\n    .on(\"zoom\", () => {\r\n      this.props.closePanel();\r\n      this.zoomed(svg)\r\n    }));\r\n  };\r\n\r\n  zoomed = svg => {\r\n    var transform = d3.event.transform;\r\n    svg.selectAll(\"path,circle,.place-label\").attr(\"transform\", transform);\r\n    var markerRed = d3.selectAll(\".marker-red\");\r\n    var markersBlack = d3.selectAll(\".marker-black\");\r\n    var placeLabel = d3.selectAll(\".place-label\");\r\n\r\n    let contextDesease = { checkToggleBTn: false , checkZoneDesease:true}\r\n    markerRed.attr(\"r\", (d)=>{\r\n      let scaledRadius =this.scaleRadius(d,contextDesease,transform.k)\r\n      return scaledRadius<5 ? 5 : scaledRadius;\r\n    } )\r\n    let contextDeaths = { checkToggleBTn: true , checkZoneDesease:false}\r\n    markersBlack.attr(\"r\", (d)=>{\r\n      let scaledRadius =this.scaleRadius(d,contextDeaths,transform.k)\r\n      return scaledRadius<5 ? 5 : scaledRadius;\r\n    } );\r\n  //Countries label Transformation\r\n  let k = transform.k;\r\n\r\n  if (k >= 1 && k < 2) {\r\n    placeLabel.style(\"font-size\", \"10px\");\r\n  } else if (k >= 2 && k < 3) {\r\n    placeLabel.style(\"font-size\", \"5px\");\r\n  } else if (k >= 3 && k < 8) {\r\n    placeLabel.style(\"font-size\", \"3px\").style(\"stroke-width\", \"0.1px\");\r\n  } else {\r\n    placeLabel\r\n      .style(\"font-size\", \"1px\")\r\n      .style(\"stroke-width\", \"0px\")\r\n      .style(\"letter-spacing\", \"0px\");\r\n  }\r\n\r\n};\r\n  /**\r\n   * d: element data\r\n   * context : the contxt\r\n   * k : scale projection [0,1]\r\n   */\r\n  scaleRadius = (d,context,k)=>{\r\n    let calculatedRadius = UIHelper.calculateRadius(d, context)/2;\r\n    let scaledRadius = k> .5 ? calculatedRadius/k : calculatedRadius\r\n    return scaledRadius + \"px\";\r\n  }\r\n\r\n  //Projection and path calculator\r\n  projection = () =>{\r\n    var geoMercator = d3\r\n      .geoMercator()\r\n      .center([0,-60])\r\n      .scale(80)\r\n      .translate([800 / 2, 650 / 2]);\r\n\r\n    var projection2 = d3\r\n      .geoOrthographic()\r\n      .center([0,-15])\r\n      .scale(190)\r\n      .precision(0.1);\r\n    var projection3 = d3\r\n      .geoConicEqualArea()\r\n      .scale(100)\r\n      .center([0, 150])\r\n      //.translate([width / 2, height / 2])\r\n      .precision(0.3);\r\n    return geoMercator;\r\n  }\r\n\r\n  calculatePath = d => {\r\n    return d3.geoPath().projection(this.projection())(d);\r\n  };\r\n\r\n  path = () => {\r\n    return d3.geoPath().projection(this.projection());\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport StringUtils from \"../../Utils/StringUtils\";\r\nimport \"./Panel.css\";\r\n\r\nexport default class Panel extends React.Component {\r\n  \r\n  componentWillMount(){\r\n    document.addEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  handleClick=(e)=>{\r\n    if(this.node.contains(e.target)){\r\n      return;\r\n    }\r\n    this.handleClickOutside(e)\r\n  }\r\n\r\n  handleClickOutside=(e)=>{\r\n    if(e.target.tagName!==\"path\" && e.target.tagName!==\"circle\"){\r\n      this.props.closePanel();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { stat, opacity,zIndex, x, y } = this.props;\r\n    return (\r\n      <div ref={(node) => (this.node = node)}>\r\n        <div\r\n          id=\"panelStat\"\r\n          className=\"mapboxgl-popup mapboxgl-popup-anchor-bottom\"\r\n          style={{\r\n            top: y + \"px\",\r\n            left: x + \"px\",\r\n            opacity: opacity,\r\n            zIndex: zIndex,\r\n          }}\r\n        >\r\n          <div className=\"mapboxgl-popup-tip\"></div>\r\n          <div className=\"mapboxgl-popup-content\">\r\n            <div\r\n              className=\"maphub-popup-inner maphub-popup-text ps\"\r\n              style={{ maxHeight: 411 + \"px\", maxWidth: 840 + \"px\" }}\r\n            >\r\n              <span\r\n                className=\"closePanel\"\r\n                onClick={() => {\r\n                  this.props.closePanel();\r\n                }}\r\n              >\r\n                X\r\n              </span>\r\n              <div className=\"nicetext\">\r\n                <div>\r\n                  <div className=\"nicetext-title panelTitle1\">\r\n                    <img className = \"impFlag\"src={stat?(stat.countryInfo? stat.countryInfo.flag : \"\") : \"\"}/>\r\n                    {\" \"}\r\n                    <span>{stat ? stat.country : \"\"}</span>\r\n                    \r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"panelTitle2\">Daily news</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"New recovered\",\r\n                    \"todayRecovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"New cases\",\r\n                    \"todayCases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkred\",\r\n                    \"New deaths\",\r\n                    \"todayDeaths\"\r\n                  )}\r\n                  <p className=\"panelTitle2\">Total</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"Total recovered\",\r\n                    \"recovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total deaths\",\r\n                    \"deaths\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"Total cases\",\r\n                    \"cases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total tests\",\r\n                    \"tests\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-x\"\r\n                style={{ left: 0 + \"px\", top: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-x\"\r\n                  tabIndex=\"0\"\r\n                  style={{ left: 0 + \"px\", width: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-y\"\r\n                style={{ top: 0 + \"px\", right: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-y\"\r\n                  tabIndex=\"0\"\r\n                  style={{ top: 0 + \"px\", height: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getPanelParagraph = (stat,color,label,field)=>{\r\n    return <p\r\n    style={{\r\n      color,\r\n       //borderTop: \"solid 1px\",\r\n      margin: \"2px 2px 2px 2px\",\r\n       //borderRadius: 6 + \"px\",\r\n      fontSize: 12+'px',\r\n      fontWeight: 'bold'\r\n    }}\r\n  >\r\n    \r\n    {label + \": \"}\r\n    {(stat && StringUtils.isNotEmpty(stat[field])) ? StringUtils.formatNumberToString(stat[field]) : \"0\"}\r\n\r\n  </p>\r\n  }\r\n}\r\n","\r\nconst constructData = (pays, statCovid19) => {\r\n    var result = [];\r\n    var i = 0;\r\n    pays.forEach((d) => {\r\n        var coordinate = {\r\n            longitude: d.longitude,\r\n            latitude: d.latitude\r\n        };\r\n\r\n        var object = {\r\n            id: i,\r\n            coordinate,\r\n            data: d,\r\n            stat: getStatByPays(d, statCovid19)\r\n        }\r\n        result.push(object);\r\n        i++;\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\nconst getStatByPays = (d, covid19) => {\r\n    let variable = covid19.filter(world => {\r\n        let countryTrimmed = world.country ? world.country.trim() : \"\";\r\n        return countryTrimmed === d.name\r\n    })\r\n    let countryData = variable[0];\r\n    if (countryData) {\r\n        return countryData\r\n    } else {\r\n        return {\r\n            country: d.name\r\n        };\r\n    }\r\n}\r\nexport default { constructData, getStatByPays };","import * as d3 from \"d3\";\r\nimport { Component } from \"react\";\r\nimport DataHelper from \"../../Utils/DataHelper.js\";\r\nimport StringUtils from \"../../Utils/StringUtils.js\";\r\nimport uihelper from '../../Utils/UIHelper';\r\nimport \"./Region.css\";\r\nclass Region extends Component {\r\n\r\n  componentWillUnmount() {\r\n    d3.selectAll(\"#markersDeaths,#markersDesease\").remove();\r\n    //.attr(\"visibility\", \"hidden\").style(\"opacity\",0);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { countries, covid19, context } = this.props;\r\n    this.drawCircles(countries, covid19, context);\r\n    //add zoom\r\n    return \"\";\r\n  }\r\n\r\n\r\n  //Create the world map\r\n  drawCircles = (countries, covid19, context) => {\r\n    let markers ;\r\n    if(context.checkZoneDesease){\r\n      markers = d3.selectAll(\"#markersDesease\");\r\n      d3.selectAll(\"#markersDeaths\").attr(\"visibility\", \"hidden\");\r\n    }\r\n    if(context.checkToggleBTn){\r\n      markers = d3.selectAll(\"#markersDeaths\");\r\n      d3.selectAll(\"#markersDesease\").attr(\"visibility\", \"hidden\");\r\n    }\r\n    if (markers.empty()) {\r\n      var gGlobal = d3.select(\"#gWrapper\");\r\n      //Draw Medias\r\n      this.drawZoneByContext(gGlobal, countries, covid19, context);\r\n      this.drawDimondPrincess(gGlobal, countries, covid19);\r\n    } \r\n    // else {\r\n    //   markers.attr(\"visibility\", \"visible\").style(\"opacity\",1);\r\n    // }\r\n  };\r\n\r\n  drawDimondPrincess = (node, countries, covid19) => {\r\n    let dimondPrincess = countries.filter(e => {\r\n      return e.country == \"DP\";\r\n    });\r\n    let statDP = DataHelper.getStatByPays(\r\n      { name: \"Diamond Princess\" },\r\n      covid19\r\n    );\r\n  };\r\n\r\n  //Add Markers Function\r\n  drawZoneByContext = (node, countries, covid19, context) => {\r\n    let data = DataHelper.constructData(countries, covid19);\r\n    var markers;\r\n    let dataFiltered = this.filterCountriesByContext(data, context);\r\n    if (dataFiltered) {\r\n      markers = node\r\n        .append(\"g\")\r\n        .attr(\"id\", this.getMarkerId(context))\r\n      markers\r\n        .selectAll(\"circle\")\r\n        .data(dataFiltered)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .on(\"click\", (d, i) => {\r\n          this.props.clickOnCircle(d);\r\n        })\r\n        .attr(\"key\", d => `marker-${d.id}`)\r\n        .attr(\"cx\", d => {\r\n          return this.getCx(d);\r\n        })\r\n        .attr(\"cy\", d => {\r\n          return this.getCy(d);\r\n        })\r\n        .attr(\"r\", d => {\r\n          return uihelper.calculateRadius(d, context)/2  + \"px\";\r\n        })\r\n        .attr(\"class\", this.getClassByContext(context))\r\n        .append(\"title\")\r\n        .text(d => {\r\n          return `country : ${d.data.country} cases : ${d.stat.cases}`;\r\n        });\r\n    }\r\n    return markers;\r\n  };\r\n\r\n  getClassByContext = (context)=>{\r\n    if(context.checkToggleBTn){\r\n      return \"marker-black\"\r\n    }else if(context.checkZoneDesease){\r\n      return \"marker-red\"\r\n    }\r\n    \r\n  }\r\n\r\n  getMarkerId = (context)=>{\r\n    if(context.checkToggleBTn){\r\n      return \"markersDeaths\"\r\n    }else if(context.checkZoneDesease){\r\n      return \"markersDesease\"\r\n    }\r\n    \r\n  }\r\n\r\n  filterCountriesByContext = (data, context) => {\r\n    let dataFiltered;\r\n    let dataSorted;\r\n    if (context.checkToggleBTn) {\r\n      dataFiltered = data.filter(\r\n        d =>\r\n          d.stat != null &&\r\n          d.stat.TotalDeaths != 0 &&\r\n          d.stat.TotalDeaths != null &&\r\n          d.data.country != \"DP\"\r\n      );\r\n      dataSorted = dataFiltered.sort((e1, e2) => {\r\n        var totalDeath1Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e1.stat.deaths),\r\n          10\r\n        );\r\n        var totalDeath2Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e2.stat.deaths),\r\n          10\r\n        );\r\n        return totalDeath2Int - totalDeath1Int;\r\n      });\r\n    } else if (context.checkZoneDesease) {\r\n      dataFiltered = data.filter(\r\n        d =>\r\n          d.stat != null &&\r\n          d.stat.ActiveCases != 0 &&\r\n          d.stat.ActiveCases != null &&\r\n          d.data.country != \"DP\"\r\n      );\r\n      dataSorted = dataFiltered.sort((e1, e2) => {\r\n        var activeCase1Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e1.stat.cases),\r\n          10\r\n        );\r\n        var activeCase2Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e2.stat.cases),\r\n          10\r\n        );\r\n        return activeCase2Int - activeCase1Int;\r\n      });\r\n    }\r\n\r\n    return dataSorted;\r\n  };\r\n\r\n  getRadius = (d, context) => {\r\n\r\n    let cases;\r\n    if (context.checkToggleBTn) {\r\n      cases = StringUtils.deleteSpecialChar(d.stat.deaths);\r\n      return this.getRadiusDeath(cases)\r\n    } else if (context.checkZoneDesease) {\r\n      cases = StringUtils.deleteSpecialChar(d.stat.cases);\r\n      return this.getRadiusCases(cases)\r\n    }\r\n  };\r\n  getRadiusCases = (cases)=>{\r\n    let rayon = 0;\r\n    if (0 <= cases && cases < 1000) {\r\n      let r = (cases / 1000) * 5;\r\n      rayon = r;\r\n    } else if (1000 <= cases && cases < 5000) {\r\n      let r = (cases / 5000) * 10;\r\n      rayon = r;\r\n    } else if (5000 <= cases && cases < 10000) {\r\n      let r = (cases / 10000) * 20;\r\n      rayon = r;\r\n    } else if (10000 <= cases && cases < 60000) {\r\n      let r = (cases / 50000) * 50;\r\n      rayon = r;\r\n    }else if (60000 <= cases && cases < 100000) {\r\n      let r = (cases / 100000) * 60;\r\n      rayon = r;\r\n    }\r\n    \r\n    return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n  }\r\n  \r\n  getRadiusDeath = (cases)=>{\r\n    let rayon = 0;\r\n    if (0 <= cases && cases < 1000) {\r\n      let r = (cases / 1000) * 10;\r\n      rayon = r;\r\n    } else if (1000 <= cases && cases < 2000) {\r\n      let r = (cases / 2000) * 30;\r\n      rayon = r;\r\n    } else if (2000 <= cases && cases < 5000) {\r\n      let r = (cases / 5000) * 40;\r\n      rayon = r;\r\n    } else if (5000 <= cases && cases < 15000) {\r\n      let r = (cases / 5000) * 45;\r\n      rayon = r;\r\n    }\r\n    \r\n    return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n  }\r\n  getCx = d => {\r\n    if (StringUtils.isNotEmpty(d)) {\r\n      var x = d.coordinate.latitude;\r\n      var y = d.coordinate.longitude;\r\n\r\n      var coordinate = [x, y];\r\n      return this.projection()(coordinate)[0];\r\n    }\r\n  };\r\n\r\n  getCy = d => {\r\n    if (StringUtils.isNotEmpty(d)) {\r\n      var x = d.coordinate.latitude;\r\n      var y = d.coordinate.longitude;\r\n      var coordinate = [x, y];\r\n      return this.projection()(coordinate)[1];\r\n    }\r\n  };\r\n\r\n  //get node color\r\n  getNodeColor = (id, media) => {\r\n    var childsCount = media.filter(d => d.id === id).length;\r\n    if (childsCount == 0) {\r\n      return \"rgba(65, 131, 215, 1)\";\r\n    } else {\r\n      return \"rgba(214, 69, 65, 1)\";\r\n    }\r\n  };\r\n\r\n  //Projection and path calculator\r\n  projection() {\r\n    var geoMercator = d3\r\n    .geoMercator()\r\n    .center([0,-60])\r\n    .scale(80)\r\n    .translate([800 / 2, 650 / 2]);\r\n\r\n    var projection2 = d3\r\n      .geoOrthographic()\r\n      .scale(300)\r\n      .precision(0.1);\r\n    var projection3 = d3\r\n      .geoConicEqualArea()\r\n      .scale(150)\r\n      .center([0, 33])\r\n      //.translate([width / 2, height / 2])\r\n      .precision(0.3);\r\n    return geoMercator;\r\n  }\r\n  \r\n}\r\n\r\nexport default Region;\r\n","import React from \"react\";\r\nimport \"./ToggleBtn.css\";\r\n\r\n\r\nexport default class ToggleBtn extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    const { checked,context,type } = this.props;\r\n    return (\r\n      <div\r\n        className=\"custom-control custom-switch markdeath\"\r\n        style={this.styling(this.props.up)}\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"custom-control-input\"\r\n          id={this.props.id}\r\n          checked={checked}\r\n          onClick={() => {\r\n              this.props.click();\r\n          }}\r\n        />\r\n        <label\r\n          className=\"custom-control-label\"\r\n          style={{ color: \"white\", fontWeight: \"bold\", fontFamily: \"courier\" }}\r\n          for={this.props.id}\r\n        >\r\n          {this.props.name}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  styling = (bool)=>{\r\n    var styleZoneCase;\r\n    if(bool){\r\n      styleZoneCase ={marginTop:'40px',backgroundColor:\"brown\",border : \"solid brown\"};\r\n    }\r\n    return styleZoneCase;\r\n  }\r\n}\r\n","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport { feature } from \"topojson-client\";\r\nimport CoronaMapView from \"../../Components/coronamap/CoronaMapView\";\r\nimport Panel from \"../../Components/panelchart/Panel\";\r\nimport Region from \"../../Components/region/Region\";\r\nimport ToggleBtn from \"../../Components/toggleButton/ToggleBtn\";\r\nimport DataHelper from \"../../Utils/DataHelper.js\";\r\nimport countries110 from \"./../../../src/countries-110m.json\";\r\nimport countries from \"./../data/countries.tsv\";\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      worldData: [],\r\n      jsonData: [],\r\n      countries: [],\r\n      pieOpacity: 0,\r\n      panelOpacity: 0,\r\n\r\n      context: {\r\n        checkToggleBTn: false,\r\n        checkZoneDesease: false\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let worldData = countries110;\r\n\r\n    this.setState({\r\n      worldData: feature(worldData, worldData.objects.countries).features,\r\n      jsonData: worldData\r\n    });\r\n\r\n    d3.tsv(countries).then((response, error) => {\r\n      this.setState({\r\n        countries: response\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      worldData,\r\n      jsonData,\r\n      countries,\r\n      panelOpacity,\r\n      context\r\n    } = this.state;\r\n    const { covid19 } = this.props;\r\n    let zoneDeaths = \"\";\r\n\r\n    if (context && (context.checkToggleBTn || context.checkZoneDesease)) {\r\n      zoneDeaths = (\r\n        <Region\r\n          context = {context}\r\n          worldData={worldData}\r\n          countries={countries}\r\n          covid19={covid19}\r\n          clickOnCircle={d => {\r\n            this.clickOnCircle(d);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    if (jsonData.length != 0 && covid19) {\r\n      return (\r\n        <div>\r\n          <CoronaMapView\r\n            worldData={worldData}\r\n            jsonData={jsonData}\r\n            closePanel={() => {\r\n              this.closePanelDetails();\r\n            }}\r\n            countries={countries}\r\n            covid19={covid19}\r\n            clickOnCountry={d => {\r\n              this.clickOnCountry(d);\r\n            }}\r\n          />\r\n          {zoneDeaths}\r\n          {/* <ToggleBtn\r\n            name=\"Zone Deaths\"\r\n            id=\"deaths\"\r\n            context={this.state.context}\r\n            checked={this.state.context.checkToggleBTn}\r\n            click={() => this.switchToggleBtn()}\r\n          />\r\n          <ToggleBtn\r\n            up ={true}\r\n            id=\"desease\"\r\n            name=\"Active cases\"\r\n            context={this.state.context}\r\n            checked={this.state.context.checkZoneDesease}\r\n            click={() => this.switchZoneDesease()}\r\n          /> */}\r\n          <Panel\r\n            opacity={panelOpacity}\r\n            zIndex={this.state.panelZindex}\r\n            stat={this.state.stat}\r\n            closePanel={() => {\r\n              this.closePanelDetails();\r\n            }}\r\n            x={this.state.x}\r\n            y={this.state.y}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  }\r\n\r\n  getData = data => {\r\n    if (data) {\r\n      return [data.ActiveCases, data.TotalDeaths, data.TotalRecovered];\r\n    } else {\r\n      return [0];\r\n    }\r\n  };\r\n\r\n  clickOnCountry = d => {\r\n    \r\n\r\n    let stat = {};\r\n    let covid19 = this.props.covid19;\r\n    if (d) {\r\n      stat = DataHelper.getStatByPays({ name: d.properties.name }, covid19);\r\n    } else {\r\n      stat = DataHelper.getStatByPays({ name: \"Morocco\" }, covid19);\r\n    }\r\n    let position = this.getPositionPanel();\r\n    this.setState({\r\n      panelOpacity: 1,\r\n      panelZindex: 1,\r\n      stat: stat,\r\n      x: position.x,\r\n      y: position.y \r\n    });\r\n    this.sendSvgToBackground();\r\n    this.props.onclick(d)\r\n  };\r\n\r\n  getPositionPanel = ()=>{\r\n    let panelStatDim = d3.selectAll(\"#panelStat\").node().getBoundingClientRect();\r\n    let leftsideDim = d3.selectAll(\"#leftside\").node().getBoundingClientRect();\r\n    let headerDim = d3.selectAll(\"#header\").node().getBoundingClientRect();\r\n    let x = d3.event.pageX - leftsideDim.width - (panelStatDim.width / 2) - 15\r\n    let y = d3.event.pageY - panelStatDim.height -headerDim.height;\r\n    return {x,y}\r\n  }\r\n  clickOnCircle = d => {\r\n    \r\n    let positionPanel = this.getPositionPanel();\r\n    this.setState({\r\n      panelOpacity: 1,\r\n      panelZindex: 10,\r\n      stat: d.stat,\r\n      x: positionPanel.x,\r\n      y: positionPanel.y\r\n    });\r\n    this.sendSvgToBackground();\r\n  };\r\n\r\n  sendSvgToBackground = () => {\r\n    d3.selectAll(\"#worldMap\").style(\"opacity\", 0.3);\r\n  };\r\n\r\n  sendSvgToFrontPage = () => {\r\n    d3.selectAll(\"#worldMap\").style(\"opacity\", 1);\r\n  };\r\n\r\n  closePanelDetails = () => {\r\n    this.setState({\r\n      panelOpacity: 0,\r\n      panelZindex: -1\r\n    });\r\n    this.sendSvgToFrontPage();\r\n    this.props.initGlobalStat();\r\n  };\r\n\r\n  constructView = () => {\r\n    const { worldData, jsonData, countries } = this.state;\r\n    if (jsonData.length != 0) {\r\n      return (\r\n        <CoronaMapView\r\n          worldData={worldData}\r\n          jsonData={jsonData}\r\n          countries={countries}\r\n        ></CoronaMapView>\r\n      );\r\n    }\r\n    return <div></div>;\r\n  };\r\n\r\n  switchToggleBtn = () => {\r\n    this.setState(currentState => ({\r\n      // checkToggleBTn: !currentState.checkToggleBTn,\r\n      context :{\r\n        checkToggleBTn: !currentState.context.checkToggleBTn,\r\n        checkZoneDesease: false\r\n      },\r\n      mapopacity: 0.5\r\n    }));\r\n\r\n  };\r\n\r\n  switchZoneDesease = () => {\r\n    var context = this.state.context;\r\n    this.setState(currentState => ({\r\n      context :{\r\n        checkToggleBTn: false,\r\n        checkZoneDesease: !currentState.context.checkZoneDesease\r\n      },\r\n      mapopacity: 0.5\r\n    }));\r\n\r\n  };\r\n}\r\n\r\nexport default Container;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"./Components/card/Card\";\r\nimport { NextPrevious } from \"./Components/nextPrevious/nextPrevious\";\r\nimport PieChartFullOption from \"./Components/pieChart2/PieChartFullOption\";\r\n// import PieChart from \"./Components/piechart/PieChart\";\r\nimport Container from \"./coronadash/container/Container\";\r\nimport { getTodayCovidData, getTodayTotalCovidData} from \"./Service/covidNinja/NinjaService\";\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dataset: {},\r\n      totalInfo : {},\r\n      isLoaded: false\r\n    };\r\n    this.clickPrevious = this.clickPrevious.bind(this);\r\n    this.clickNext = this.clickNext.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    let dataset = {}\r\n    getTodayCovidData().then(response =>{\r\n      dataset = response.filter((d)=>{ return d.country !=\"Western Sahara\"})\r\n      getTodayTotalCovidData().then(response =>{\r\n            this.setState({\r\n            dataset,\r\n            totalInfo: response,\r\n            isLoaded: true\r\n          });\r\n      });\r\n    });\r\n   \r\n  }\r\n  \r\n  clickPrevious (){\r\n  }\r\n\r\n  clickNext(){\r\n  }\r\n\r\n  render() {\r\n    console.log(\"App render\")\r\n    if (!this.state.isLoaded) {\r\n      return \"\";\r\n    }\r\n    let pieData;\r\n    if(this.state.countryClicked){\r\n      pieData = this.getPieData(this.state.countryClicked);\r\n    }else{\r\n      pieData = this.getPieData(this.getGlobalStat(this.state.dataset));\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"container-fluid\"\r\n        style={{ overflow: \"auto\", height: \"1500px\" }}\r\n      >\r\n        <div id=\"header\" className=\"row\">\r\n          <div className=\"header\">\r\n           <NextPrevious clickPrevious={this.clickPrevious} clickNext={this.clickNext}/> \r\n           <div>covid19 worldwide <i className=\"fa fa-globe\" aria-hidden=\"true\"></i></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div\r\n            id=\"leftside\"\r\n            className=\"col-2\"\r\n            style={{\r\n              paddingRight: 0 + \"px\",\r\n              height: window.screen.height + \"px\",\r\n            }}\r\n          >\r\n            <div className=\"row cards\">\r\n              <Card\r\n                covid19={this.state.dataset}\r\n                totalInfo = {this.state.totalInfo}\r\n                countryClicked={this.state.countryClicked}\r\n              ></Card>\r\n            </div>\r\n            <div\r\n              className=\"row statistics\"\r\n              style={{\r\n                overflow: \"hidden\",\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n              }}\r\n            >\r\n              {/* <PieChart\r\n                opacity={1}\r\n                zIndex={1}\r\n                data={this.getGlobalStat(this.state.dataset)}\r\n                countryClicked={this.state.countryClicked}\r\n                // data={this.getPieData(this.getGlobalStat(this.state.dataset))}\r\n                x={85}\r\n                y={100}\r\n              ></PieChart> */}\r\n              <PieChartFullOption \r\n              data={[\r\n                { title: \"total recovered\", value: parseInt(pieData[0]), color: \"rgb(44, 100, 6)\" },\r\n                { title: \"total cases\", value: parseInt(pieData[1]), color: \"rgb(201, 93, 22)\" },\r\n                { title: \"total deaths\", value: parseInt(pieData[2]), color: \"rgb(0, 0, 0)\" },\r\n              ]}\r\n              countryClicked={this.state.countryClicked}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"col-10\"\r\n            style={{ height: window.screen.height + \"px\" }}\r\n          >\r\n            <div id=\"mapWW\" className=\"col\">\r\n              <Container\r\n                covid19={this.state.dataset}\r\n                onclick={(d) => this.onclickCountry(d)}\r\n                initGlobalStat={() => {\r\n                  this.initGlobalStat();\r\n                }}\r\n              ></Container>\r\n            </div>\r\n            {/* <TableComponent></TableComponent> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\">\r\n          {/* {lastupdate}\r\n          <br></br> */}\r\n          <i className=\"fa fa-github-square\" aria-hidden=\"true\"></i>\r\n          <a\r\n            href=\"https://github.com/ahmedElmaghr/coronaMap.git\"\r\n            className=\"github-link\"\r\n            style={{ color: \"white\" }}\r\n          >\r\n            {\" \"}\r\n            github repository\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onclickCountry = (d)=>{\r\n    var dataset = this.state.dataset;\r\n    var countryFiltered;\r\n    if(!d){\r\n      countryFiltered = dataset.filter((elt)=>{\r\n        return elt.country ==\"Morocco\";\r\n      })\r\n    }else{\r\n      countryFiltered = dataset.filter((elt)=>{\r\n        return elt.country == d.properties.name;\r\n      })\r\n    }\r\n    this.setState({\r\n      countryClicked : countryFiltered[0]\r\n    })\r\n  }\r\n\r\n  getPieData = data => {\r\n    if (data) {\r\n      let totalCases = data.cases;\r\n      let totalRecovered = data.recovered;\r\n      let totalDeaths = data.deaths;\r\n      return [totalRecovered,totalCases, totalDeaths];\r\n    } else {\r\n      return [0];\r\n    }\r\n  };\r\n\r\n  getGlobalStat = data => {\r\n    let totalStatistics;\r\n    if (Array.isArray(data) && data.length) {\r\n      //FIXME : refactor this code\r\n      totalStatistics = data.filter(elt => {\r\n        return elt.country == \"Morocco\";\r\n      })[0];\r\n    }\r\n    return totalStatistics;\r\n  };\r\n\r\n  initGlobalStat = ()=>{\r\n    this.setState({\r\n      countryClicked : undefined\r\n    })\r\n  }\r\n}\r\n","\r\n// const URL_DATA_YESTERDAY : string = \"https://corona.lmao.ninja/v2/countries?yesterday&sort\";\r\nconst URL_DATA_TODAY : string = \"https://corona.lmao.ninja/v2/countries?today&sort\";\r\nconst URL_DATA_TODAY_TOTAL : string = \"https://corona.lmao.ninja/v2/all?today\";\r\n// const URL_DATA_YESTERDAY_TOTAL : string = \"https://corona.lmao.ninja/v2/all?yesterday\";\r\n\r\n    // export const getYesterDayCovidData  = ()=>{\r\n    //     return fetch(URL_DATA_YESTERDAY).then((data)=>{\r\n    //         return data.json();\r\n    //     })\r\n    // }\r\n\r\n    export const getTodayCovidData = ()=>{\r\n        return fetch(URL_DATA_TODAY).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getTodayTotalCovidData  = ()=>{\r\n        return fetch(URL_DATA_TODAY_TOTAL).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    // export const getYesterdayTotalCovidData  = ()=>{\r\n    //     return fetch(URL_DATA_YESTERDAY_TOTAL).then((data)=>{\r\n    //         return data.json();\r\n    //     })\r\n    // }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// window.screen.orientation.lock('landscape');\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}