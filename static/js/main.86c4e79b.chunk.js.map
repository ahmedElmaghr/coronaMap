{"version":3,"sources":["models/CountryInfo.ts","models/CountryDailyInfo.ts","models/TotalInfo.ts","pages/footer/footer.tsx","components/navBar/navbar.tsx","pages/header/header.tsx","pages/about/About.tsx","utils/dateUtils.ts","utils/StringUtils.js","utils/UIHelper.js","components/card/Card.tsx","components/card/Cards.tsx","pages/home/home.tsx","components/coronadash/mapD3/Legend.js","components/coronadash/mapD3/CoronaMapView.js","components/panelchart/Panel.js","utils/DataHelper.js","components/region/Region.js","components/coronadash/data/countries.tsv","components/coronadash/container/Container.js","pages/page1/Page1.tsx","components/table/schema/schema.ts","components/table/DataTable.tsx","pages/page2/Page2.tsx","components/barChart/BarChart.tsx","pages/page3/Page3.tsx","components/select/Select.tsx","models/historical/Timeline.ts","models/historical/HistoricalCountry.ts","services/covidNinja/NinjaService.ts","utils/Constants.ts","dto/selectOptions.ts","routes/navigation.tsx","utils/countries.ts","App.tsx","serviceWorker.js","index.js"],"names":["CountryInfo","JsonObject","JsonProperty","Number","String","this","_id","iso2","iso3","lat","long","flag","CountryDailyInfo","id","updated","country","countryInfo","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","tests","population","continent","TotalInfo","affectedCountries","Footer","className","href","style","color","React","Navbar","to","Header","About","formatEpochDateToDate","epoch","Date","toUTCString","deleteSpecialChar","string","split","join","entity","num","toString","replace","getRadiusCases","rayon","getRadiusDeath","value","separator","end","duration","d","context","checkToggleBTn","StringUtils","stat","checkZoneDesease","Card","uihelper","props","title","Component","Cards","totalInfo","totalConfirmed","activeCases","totalDeaths","contentStyle","icon","titleStyle","Home","getPieData","data","totalCases","display","flex","textAlign","Legend","svg","d3","append","attr","text","svgMap","node","getBoundingClientRect","height","width","top","zIndex","CoronaMapView","viewBox","borderColor","mergeMorrocanSahara","g","jsonData","morocco","objects","countries","geometries","filter","morrocanSahara","toBeMerged","datum","merge","calculatePath","getMoroccoCountryColor","covid19","on","clickOnCountry","morrocanTodayCases","c","getCountryColor","addCountriesName","worldData","selectAll","includes","properties","name","enter","path","centroid","drawMap","i","markDesease","elt","e","trim","dailyNewCase","dailyCase","addZoom","call","scaleExtent","translateExtent","extent","closePanel","zoomed","transform","markerRed","markersBlack","placeLabel","contextDesease","scaledRadius","scaleRadius","k","contextDeaths","calculatedRadius","UIHelper","projection","geoMercator","center","scale","translate","precision","length","gGlobal","drawSvgWrapper","wrapper","PureComponent","Panel","handleClick","contains","target","handleClickOutside","tagName","getPanelParagraph","label","field","margin","fontSize","fontWeight","document","addEventListener","removeEventListener","opacity","x","y","ref","left","maxHeight","maxWidth","onClick","src","tabIndex","right","getStatByPays","countryData","world","constructData","pays","statCovid19","result","forEach","coordinate","longitude","latitude","object","push","Region","drawCircles","markers","empty","drawZoneByContext","drawDimondPrincess","DataHelper","dataFiltered","filterCountriesByContext","getMarkerId","clickOnCircle","getCx","getCy","getClassByContext","dataSorted","TotalDeaths","sort","e1","e2","totalDeath1Int","parseInt","ActiveCases","activeCase1Int","getRadius","getNodeColor","media","remove","Container","getData","TotalRecovered","position","getPositionPanel","setState","panelOpacity","panelZindex","sendSvgToBackground","onclick","panelStatDim","headerDim","pageX","pageY","sendSvgToFrontPage","closePanelDetails","initGlobalStat","state","pieOpacity","countries110","feature","features","then","response","error","zoneDeaths","Page1","onclickCountry","countryFiltered","dataset","countryClicked","undefined","window","screen","columnsSchema","headerName","valueGetter","params","row","editable","description","type","sortable","DataTable","rows","columns","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","Page2","coutriesDailyinfo","JsonConvert","deserializeArray","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","DailyNewsTypes","BarChart","errorHandler","onChangeCallback","selectedInterval","animatedComponents","makeAnimated","SelectRange","closeMenuOnSelect","components","options","onChange","Timeline","Map","HistoricalCountry","province","timeline","URL_HIST_DATA","getHistoricalDataByCountryAndPeriod","countryName","period","fetch","json","jsonConvert","ignorePrimitiveChecks","valueCheckingMode","ValueCheckingMode","ALLOW_NULL","Page3","getOptions","graphTitle","responsive","plugins","legend","getLabels","countryHistoricalData","casesAsMAp","Object","entries","keys","getCountryDeathsData","maHistData","countryDeathsAsMap","countryDeathsPerDay","values","map","v","array","Math","abs","console","log","labels","datasets","backgroundColor","getCountryCasesData","countryHistData","countryCasesAsMap","countryCasesPerDay","getTotalDataByType","_x","countryDeathsValues","DEATHS","handleChangeSelect","deserializeObject","loaded","getTotalCasesData","maCasesAsMap","maValues","countriesRef","CASES","SelectOptions","Navigation","element","App","isDataLoaded","allDataExceptWS","allCoutriesDailyinfo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86c4e79b.chunk.js","sourcesContent":["import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"CountryInfo\")\r\nexport class CountryInfo {\r\n  @JsonProperty(\"_id\", Number)\r\n  _id: number;\r\n  @JsonProperty(\"iso2\", String)\r\n  iso2: string;\r\n  @JsonProperty(\"iso3\", String)\r\n  iso3: string;\r\n  @JsonProperty(\"lat\", Number)\r\n  lat: number;\r\n  @JsonProperty(\"long\", Number)\r\n  long: number;\r\n  @JsonProperty(\"flag\", String)\r\n  flag: string;\r\n\r\n  constructor() {\r\n    this._id = 0;\r\n    this.iso2 = \"\";\r\n    this.iso3 = \"\";\r\n    this.lat = 0;\r\n    this.long = 0;\r\n    this.flag = \"\";\r\n  }\r\n\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\nimport { CountryInfo } from \"./CountryInfo\";\r\n\r\n@JsonObject(\"CountryDailyInfo\")\r\nexport class CountryDailyInfo {\r\n  @JsonProperty(\"country\", String)\r\n  id: string;\r\n  \r\n  @JsonProperty(\"updated\", Number)\r\n  updated: number;\r\n  @JsonProperty(\"country\", String)\r\n  country: string;\r\n  @JsonProperty(\"countryInfo\")\r\n  countryInfo : CountryInfo;\r\n  @JsonProperty(\"cases\", Number)\r\n  cases: number;\r\n  @JsonProperty(\"todayCases\", Number)\r\n  todayCases: number;\r\n  @JsonProperty(\"deaths\", Number)\r\n  deaths: number;\r\n  @JsonProperty(\"todayDeaths\", Number)\r\n  todayDeaths: number;\r\n  @JsonProperty(\"recovered\", Number)\r\n  recovered: number;\r\n  @JsonProperty(\"todayRecovered\", Number)\r\n  todayRecovered: number;\r\n  @JsonProperty(\"active\", Number)\r\n  active: number;\r\n  @JsonProperty(\"critical\", Number)\r\n  critical: number;\r\n  @JsonProperty(\"tests\", Number)\r\n  tests: number;\r\n  @JsonProperty(\"population\", Number)\r\n  population: number;\r\n  @JsonProperty(\"continent\", String)\r\n  continent: string;\r\n\r\n  constructor() {\r\n      this.id = \"\";\r\n    this.updated = 0;\r\n    this.country = \"\";\r\n    this.countryInfo = new CountryInfo();\r\n    this.cases = 0;\r\n    this.todayCases = 0;\r\n    this.deaths = 0;\r\n    this.todayDeaths = 0;\r\n    this.recovered = 0;\r\n    this.todayRecovered = 0;\r\n    this.active = 0;\r\n    this.critical = 0;\r\n    this.tests = 0;\r\n    this.population = 0;\r\n    this.continent = \"\";\r\n  }\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"TotalInfo\")\r\nexport class TotalInfo {\r\n  @JsonProperty(\"updated\", Number)\r\n  updated: number;\r\n  @JsonProperty(\"affectedCountries\", Number)\r\n  affectedCountries: number;\r\n  @JsonProperty(\"cases\", Number)\r\n  cases: number;\r\n  @JsonProperty(\"todayCases\", Number)\r\n  todayCases: number;\r\n  @JsonProperty(\"deaths\", Number)\r\n  deaths: number;\r\n  @JsonProperty(\"todayDeaths\", Number)\r\n  todayDeaths: number;\r\n  @JsonProperty(\"recovered\", Number)\r\n  recovered: number;\r\n  @JsonProperty(\"todayRecovered\", Number)\r\n  todayRecovered: number;\r\n  @JsonProperty(\"active\", Number)\r\n  active: number;\r\n  @JsonProperty(\"critical\", Number)\r\n  critical: number;\r\n  @JsonProperty(\"tests\", Number)\r\n  tests: number;\r\n  @JsonProperty(\"population\", Number)\r\n  population: number;\r\n\r\n  constructor() {\r\n    this.updated = 0;\r\n    this.affectedCountries = 0;\r\n    this.cases = 0;\r\n    this.todayCases = 0;\r\n    this.deaths = 0;\r\n    this.todayDeaths = 0;\r\n    this.recovered = 0;\r\n    this.todayRecovered = 0;\r\n    this.active = 0;\r\n    this.critical = 0;\r\n    this.tests = 0;\r\n    this.population = 0;\r\n  }\r\n}\r\n","import * as React from \"react\"\r\n\r\nexport class Footer extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                    <i className=\"fa fa-github-square\" aria-hidden=\"true\"></i>\r\n                    <a\r\n                        href=\"https://github.com/ahmedElmaghr/coronaMap.git\"\r\n                        className=\"github-link\"\r\n                        style={{ color: \"white\" }}\r\n                    >\r\n                        {\" \"}\r\n                        github repository\r\n                    </a>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './navbar.css'\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=''>\r\n                    <ul className=\"topnav\">\r\n                        <li className='active'>\r\n                            <Link to=\"/\">\r\n                            <i className=\"fa fa-home\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Home \r\n                                </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/stat\">\r\n                            <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Countries \r\n                                </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/charts\">\r\n                            <i className=\"fa fa-line-chart\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Charts \r\n                                </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/map\">\r\n                            <i className=\"fa fa-map\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Map \r\n                                </Link>\r\n                        </li>\r\n                        <li className='about'>\r\n                            <Link to=\"/about\">\r\n                            <i className=\"fa fa-info\" aria-hidden=\"true\"></i>\r\n                            {\" \"} About\r\n                                </Link>\r\n                        </li>\r\n                    </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import * as React from \"react\"\r\nimport Navbar from \"../../components/navBar/navbar\"\r\nimport { NextPrevious } from \"../../components/nextPrevious/nextPrevious\"\r\n\r\nexport class Header extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"header\">\r\n                    {/*to improve navbar https://mui.com/components/app-bar/ */}\r\n                    <Navbar/>\r\n                    {/* <NextPrevious clickPrevious={()=>{console.log(\"click previous\")}} clickNext={()=>{console.log(\"click next\")}} /> */}\r\n                    <div>covid19 worldwide <i className=\"fa fa-globe\" aria-hidden=\"true\"></i></div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","\r\n\r\nexport const About =()=>{\r\n\r\n    return (\r\n        <div>\r\n            About section.\r\n        </div>\r\n        )\r\n}","export const formatEpochDateToDate = (epoch: number) => {\r\n  var d = new Date(epoch);\r\n  return d.toUTCString();\r\n};\r\n","  //verify string not empty\r\n  const isNotEmpty = entity => {\r\n   return entity != \"\" && entity != null;\r\n   //    return entity != null && entity.trim() != \"\";\r\n\r\n  };\r\n\r\n  //\r\n  const deleteSpecialChar = (string)=>{\r\n    if(typeof string != \"string\"){\r\n      throw \"formatStringToNumber is applied only on string format\"\r\n    }\r\n    var splitted = string.split(`,`).join('');\r\n\r\n    return splitted;\r\n  }\r\n\r\n  const stringVirSepToNumber = (string)=>{\r\n    var stringWithoutSpecChar = deleteSpecialChar(string);\r\n    return parseInt(stringWithoutSpecChar,10);\r\n  }\r\n\r\n  const formatNumberToString = (num) =>{\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n\r\nexport default { isNotEmpty,deleteSpecialChar,stringVirSepToNumber,formatNumberToString};","\r\nimport React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport StringUtils from './StringUtils';\r\n\r\n/** example \"16.25\" -> 16,25 + counter  */\r\nconst buildCountUpByStringValue = (value)=>{\r\n    return (\r\n      <CountUp\r\n        separator=\" \"\r\n        end={value}\r\n        duration={1.5}\r\n      ></CountUp>\r\n    );\r\n  }\r\n\r\nconst   calculateRadius = (d, context) => {\r\n  let cases;\r\n  if (context.checkToggleBTn) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.deaths);\r\n    return getRadiusDeath(cases)\r\n  } else if (context.checkZoneDesease) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.cases);\r\n    return getRadiusCases(cases)\r\n  }\r\n};\r\n\r\nconst getRadiusCases = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 10;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 10000) {\r\n    let r = (cases / 10000) * 20;\r\n    rayon = r;\r\n  } else if (10000 <= cases && cases < 60000) {\r\n    let r = (cases / 50000) * 50;\r\n    rayon = r;\r\n  }else if (60000 <= cases && cases < 100000) {\r\n    let r = (cases / 100000) * 60;\r\n    rayon = r;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nconst getRadiusDeath = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 2000) {\r\n    let r = (cases / 2000) * 20;\r\n    rayon = r;\r\n  } else if (2000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 22;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 15000) {\r\n    let r = (cases / 5000) * 25;\r\n    rayon = r;\r\n  }else{\r\n    rayon = 30;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nexport default{buildCountUpByStringValue,calculateRadius}","\r\nimport React, { Component } from \"react\";\r\nimport uihelper from \"../../utils/UIHelper\";\r\nimport \"./Cards.css\";\r\n\r\ninterface Props {\r\n    title: string;\r\n    titleStyle: string;\r\n    contentStyle: string;\r\n    icon: string;\r\n    value: number;\r\n    updated : string\r\n}\r\nexport default class Card extends Component<Props, Readonly<{}>> {\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className={\"red-content\"}>{uihelper.buildCountUpByStringValue(this.props.value)}</div>\r\n                <div className={\"black-title\"}> {/*<i className={this.props.icon} aria-hidden=\"true\"></i>*/} {this.props.title}</div>\r\n                <div className=\"card-updated\">Last update: {this.props.updated}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport { formatEpochDateToDate } from \"../../utils/dateUtils\";\r\nimport Card from \"./Card\";\r\nimport \"./Cards.css\";\r\n\r\ninterface Props {\r\n  totalInfo: TotalInfo;\r\n}\r\nexport default class Cards extends Component<Props, Readonly<{}>> {\r\n  render() {\r\n    const { totalInfo } = this.props;\r\n\r\n\r\n    let totalConfirmed = totalInfo.cases;\r\n    let activeCases = totalInfo.todayCases;\r\n    let recovered = totalInfo.todayRecovered;\r\n    let totalDeaths = totalInfo.deaths;\r\n    let updated = totalInfo.updated;\r\n    //\r\n    return (\r\n      <>\r\n        <div className=\"col-8 group-card-left\">\r\n          <Card\r\n            title=\"Confirmed cases\"\r\n            contentStyle=\"red-content\"\r\n            icon=\"fa fa-globe\"\r\n            titleStyle=\"red-title\"\r\n            value={totalConfirmed}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n          <Card\r\n            title=\"Daily cases\"\r\n            contentStyle=\"orange-content\"\r\n            icon=\"fa fa-ambulance\"\r\n            titleStyle=\"orange-title\"\r\n            value={activeCases}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n        </div>\r\n        <div className=\"col-8 group-card-right\">\r\n          <Card\r\n            title=\"Confirmed deaths\"\r\n            contentStyle=\"black-content\"\r\n            icon=\"fa fa-heartbeat\"\r\n            titleStyle=\"black-title\"\r\n            value={totalDeaths}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n\r\n          <Card\r\n            title=\"Daily recovered\"\r\n            contentStyle=\"green-content\"\r\n            icon=\"fa fa-heart\"\r\n            titleStyle=\"green-title\"\r\n            value={recovered}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport Cards from \"../../components/card/Cards\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport './home.css';\r\n\r\n\r\ninterface Props {\r\n  totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n}\r\nexport class Home extends React.Component<Props, State>{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  getPieData = (data: TotalInfo) => {\r\n    if (data) {\r\n      let totalCases = data.cases;\r\n      let totalRecovered = data.recovered;\r\n      let totalDeaths = data.deaths;\r\n      return [totalRecovered, totalCases, totalDeaths];\r\n    } else {\r\n      return [0];\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    let pieData;\r\n    pieData = this.getPieData(this.props.totalInfo);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"home\">\r\n          <div className=\"row\">\r\n            <div className=\"col-6 panels\">\r\n              <Cards\r\n                totalInfo={this.props.totalInfo}\r\n              ></Cards>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\" style={{display:\"flex\"}}>\r\n            <div className=\"col-8\" style={{flex:1}}>\r\n            </div>\r\n            <div className=\"col-8\" style={{flex:1,textAlign:\"center\"}}>\r\n              Shortcut map\r\n              {/* <img src=\"\"></img> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n          {/* <div\r\n            className=\"row pie-container\">\r\n            <div className=\"pie\">\r\n              <PieChartFullOption\r\n                data={[\r\n                  { title: \"Recovered\", value: parseInt(pieData[0]), color: \"rgb(44, 100, 6)\" },\r\n                  { title: \"Cases\", value: parseInt(pieData[1]), color: \"rgb(201, 93, 22)\" },\r\n                  { title: \"Deaths\", value: parseInt(pieData[2]), color: \"rgb(0, 0, 0)\" },\r\n                ]}\r\n              />\r\n            </div>\r\n          </div> */}","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport \"./Legend.css\";\r\n\r\nexport default class Legend extends Component {\r\n  componentDidMount() {\r\n    var svg = d3.select(\"#legend\")\r\n    // Handmade legend\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",10).attr(\"r\", 6).style(\"fill\", \"#6f8d43\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",30).attr(\"r\", 6).style(\"fill\", \"#71c7ec\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",50).attr(\"r\", 6).style(\"fill\", \"#65b3d4\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",70).attr(\"r\", 6).style(\"fill\", \"#386376\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",90).attr(\"r\", 6).style(\"fill\", \"#16272f\")\r\n    // svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",110).attr(\"r\", 6).style(\"fill\", \"#386376\")\r\n    svg.append(\"circle\").attr(\"cx\",10).attr(\"cy\",110).attr(\"r\", 6).style(\"fill\", \"rgba(218, 223, 225, 1)\")\r\n\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 10).text(\"no new cases\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 30).text(\"< 2k\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 50).text(\"2k - 5K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 70).text(\"5K - 15K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 90).text(\">15k\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    // svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 110).text(\"30K - 100K\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 110).text(\"infos not available\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    let svgMap = d3.selectAll('#content').node().getBoundingClientRect();\r\n    return (\r\n      <div className=\"legend\" style = {{height:'30%',width:'15%',top : svgMap.height*.6,zIndex:1}}>\r\n        <svg  id = \"legend\" style = {{height:'100%',width:'100%'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as d3 from \"d3\";\r\nimport React, { PureComponent } from \"react\";\r\nimport { merge } from \"topojson-client\";\r\nimport UIHelper from \"../../../utils/UIHelper\";\r\nimport \"./CoronaMapViewCss.css\";\r\nimport Legend from \"./Legend.js\";\r\n\r\nexport default class CoronaMapView extends PureComponent {\r\n  //Constantes\r\n\r\n  width = \"100%\";\r\n  height = \"100%\";\r\n  viewBox = `0 0 800 400`;\r\n  borderColor = \"blue\";\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.jsonData.length != 0) {\r\n      //Draw svg Wrapper\r\n      var svg = this.drawSvgWrapper();\r\n      var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n      //Draw Path from worldData\r\n      var g = this.drawMap(gGlobal, this.props.worldData);\r\n      //Merge morrocan sahara\r\n      this.mergeMorrocanSahara(g);\r\n      //country names\r\n      this.addCountriesName(g,this.props.worldData);\r\n      //add zoom\r\n      var wrapper = d3.select(\"#content\");\r\n      this.addZoom(wrapper);\r\n    }\r\n  }\r\n\r\n  mergeMorrocanSahara = g => {\r\n    //merge Morocco\r\n    var jsonData = this.props.jsonData;\r\n    //Moroccan Sahara id = 732\r\n    //Morocco id = 504\r\n    var morocco = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 504\r\n    );\r\n    var morrocanSahara = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 732\r\n    );\r\n    var toBeMerged = [morocco[0], morrocanSahara[0]];\r\n    //\r\n    g.append(\"path\")\r\n      .datum(merge(jsonData, toBeMerged))\r\n      .attr(\"class\", \"country\")\r\n      .attr(\"d\", d => this.calculatePath(d))\r\n      .attr(\"fill\", this.getMoroccoCountryColor(this.props.covid19))\r\n      .on(\"click\", (d) => {\r\n        this.props.clickOnCountry()\r\n      })\r\n  };\r\n\r\n   getMoroccoCountryColor = (data) => {\r\n    const moroccoData = data.filter(c => c.country == \"Morocco\");\r\n    let morrocanTodayCases = moroccoData[0].todayCases;\r\n    return this.getCountryColor(morrocanTodayCases); \r\n   }\r\n\r\n   addCountriesName = (g, worldData) => {\r\n    g.selectAll(\".place-label\")\r\n      .data(\r\n        worldData.filter((d) => {\r\n          return [\r\n            \"Morocco\",\r\n            \"USA\",\r\n            \"China\",\r\n            \"Brazil\",\r\n            \"Australia\",\r\n            \"Russia\",\r\n            \"South Africa\",\r\n            \"Chile\",\r\n            \"Mexico\",\r\n            \"Iran\",\r\n            \"Germany\",\r\n            \"Nigeria\",\r\n            \"Egypt\",\r\n            \"India\",  \r\n            \"Greenland\",\r\n            \"France\"\r\n          ].includes(d.properties.name);\r\n        })\r\n      )\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"place-label\")\r\n      .attr(\"x\", (d) => {\r\n        return this.path().centroid(d)[0];\r\n      })\r\n      .attr(\"y\", (d) => {\r\n        return this.path().centroid(d)[1];\r\n      })\r\n      .text((d) => {\r\n        return d.properties.name;\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Legend></Legend>\r\n    );\r\n  }\r\n\r\n\r\n  //Draw svg wrapper for map\r\n  drawSvgWrapper() {\r\n    //Construct Body\r\n    var body = d3.select(\"#mapWW\")\r\n    //Construct SVG\r\n    var svg = body\r\n      .append(\"svg\")\r\n      .attr(\"class\", \"svg\")\r\n      .attr(\"id\", \"content\")\r\n      .attr(\"width\", this.width)\r\n      // .attr(\"height\", window.screen.height +'px')\r\n      .attr(\"viewBox\", this.viewBox)\r\n      ;\r\n    return svg;\r\n  }\r\n\r\n  //Draw the world Map\r\n  drawMap = (node, worldData) => {\r\n      var g = node\r\n        .append(\"g\")\r\n        .attr(\"id\", \"worldMap\")\r\n        .attr(\"className\", \"countries\");\r\n      g.selectAll(\"path\")\r\n        .data(worldData)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"key\", (d, i) => `path-${i}`)\r\n        .attr(\"d\", d => this.calculatePath(d))\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", (d) => {\r\n          return this.markDesease(d)\r\n        })\r\n        .on(\"click\", (d) => {\r\n          this.props.clickOnCountry(d);\r\n        })\r\n      return g;\r\n\r\n  };\r\n\r\n  //Color land \r\n  markDesease = (d) => {\r\n    let elt = this.props.covid19.filter((e) => {\r\n      let countryTrimmed = e.country ? e.country.trim() : \"\";\r\n\r\n      return countryTrimmed == d.properties.name\r\n    })\r\n    if (elt[0]) {\r\n      let dailyNewCase = elt[0].todayCases;\r\n      return this.getCountryColor(dailyNewCase);\r\n\r\n    } else {\r\n      return `rgba(218, 223, 225, 1)`\r\n    }\r\n  }\r\n\r\n  //Get country color range rgba(255,255,255)\r\n  getCountryColor = (dailyCase) => {\r\n    if(dailyCase == 0){\r\n      return '#6f8d43'\r\n    } \r\n    \r\n    /*else if (0 < dailyCase && dailyCase <= 100) {\r\n      return '#71c7ec'\r\n    } else if (100 <= dailyCase && dailyCase < 200) {\r\n      return '#65b3d4'\r\n    } else if (200 <= dailyCase && dailyCase < 500) {\r\n      return '#5a9fbc'\r\n    } else if (500 <= dailyCase && dailyCase < 1000) {\r\n      return '#4f8ba5'\r\n    } else if (1000 <= dailyCase && dailyCase < 5000) {\r\n      return '#43778d'\r\n    } */\r\n    else if (0 < dailyCase && dailyCase <= 2000) {\r\n      return '#71c7ec'\r\n    }\r\n    else if (2000 < dailyCase && dailyCase <= 5000) {\r\n      return '#65b3d4'\r\n    }\r\n    else if (5000 <= dailyCase && dailyCase < 15000) {\r\n      return '#386376'\r\n    } else if (15000 <= dailyCase) {\r\n      return '#16272f'\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  //Add zoom\r\n  addZoom = svg => {\r\n    const map = d3.select(\".svg\");\r\n    const width = map.node().getBoundingClientRect().width;\r\n    const height = width / 3;\r\n\r\n    svg.call(d3.zoom()\r\n    .scaleExtent([1, 50])\r\n    .translateExtent([[0,0], [width, height]])\r\n    .extent([[0, 0], [width, height]])\r\n    .on(\"zoom\", () => {\r\n      this.props.closePanel();\r\n      this.zoomed(svg)\r\n    }));\r\n  };\r\n\r\n  zoomed = svg => {\r\n    var transform = d3.event.transform;\r\n    svg.selectAll(\"path,circle,.place-label\").attr(\"transform\", transform);\r\n    var markerRed = d3.selectAll(\".marker-red\");\r\n    var markersBlack = d3.selectAll(\".marker-black\");\r\n    var placeLabel = d3.selectAll(\".place-label\");\r\n\r\n    let contextDesease = { checkToggleBTn: false , checkZoneDesease:true}\r\n    markerRed.attr(\"r\", (d)=>{\r\n      let scaledRadius =this.scaleRadius(d,contextDesease,transform.k)\r\n      return scaledRadius<5 ? 5 : scaledRadius;\r\n    } )\r\n    let contextDeaths = { checkToggleBTn: true , checkZoneDesease:false}\r\n    markersBlack.attr(\"r\", (d)=>{\r\n      let scaledRadius =this.scaleRadius(d,contextDeaths,transform.k)\r\n      return scaledRadius<5 ? 5 : scaledRadius;\r\n    } );\r\n  //Countries label Transformation\r\n  let k = transform.k;\r\n\r\n  if (k >= 1 && k < 2) {\r\n    placeLabel.style(\"font-size\", \"10px\");\r\n  } else if (k >= 2 && k < 3) {\r\n    placeLabel.style(\"font-size\", \"5px\");\r\n  } else if (k >= 3 && k < 8) {\r\n    placeLabel.style(\"font-size\", \"3px\").style(\"stroke-width\", \"0.1px\");\r\n  } else {\r\n    placeLabel\r\n      .style(\"font-size\", \"1px\")\r\n      .style(\"stroke-width\", \"0px\")\r\n      .style(\"letter-spacing\", \"0px\");\r\n  }\r\n\r\n};\r\n  /**\r\n   * d: element data\r\n   * context : the contxt\r\n   * k : scale projection [0,1]\r\n   */\r\n  scaleRadius = (d,context,k)=>{\r\n    let calculatedRadius = UIHelper.calculateRadius(d, context)/2;\r\n    let scaledRadius = k> .5 ? calculatedRadius/k : calculatedRadius\r\n    return scaledRadius + \"px\";\r\n  }\r\n\r\n  //Projection and path calculator\r\n  projection = () =>{\r\n    var geoMercator = d3\r\n      .geoMercator()\r\n      .center([0,-60])\r\n      .scale(80)\r\n      .translate([800 / 2, 650 / 2]);\r\n\r\n    var projection2 = d3\r\n      .geoOrthographic()\r\n      .center([0,-15])\r\n      .scale(190)\r\n      .precision(0.1);\r\n    var projection3 = d3\r\n      .geoConicEqualArea()\r\n      .scale(100)\r\n      .center([0, 150])\r\n      //.translate([width / 2, height / 2])\r\n      .precision(0.3);\r\n    return geoMercator;\r\n  }\r\n\r\n  calculatePath = d => {\r\n    return d3.geoPath().projection(this.projection())(d);\r\n  };\r\n\r\n  path = () => {\r\n    return d3.geoPath().projection(this.projection());\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport StringUtils from \"../../utils/StringUtils\";\r\nimport \"./Panel.css\";\r\n\r\nexport default class Panel extends React.Component {\r\n  \r\n  componentWillMount(){\r\n    document.addEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  handleClick=(e)=>{\r\n    if(this.node.contains(e.target)){\r\n      return;\r\n    }\r\n    this.handleClickOutside(e)\r\n  }\r\n\r\n  handleClickOutside=(e)=>{\r\n    if(e.target.tagName!==\"path\" && e.target.tagName!==\"circle\"){\r\n      this.props.closePanel();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { stat, opacity,zIndex, x, y } = this.props;\r\n    return (\r\n      <div ref={(node) => (this.node = node)}>\r\n        <div\r\n          id=\"panelStat\"\r\n          className=\"mapboxgl-popup mapboxgl-popup-anchor-bottom\"\r\n          style={{\r\n            top: y + \"px\",\r\n            left: x + \"px\",\r\n            opacity: opacity,\r\n            zIndex: zIndex,\r\n          }}\r\n        >\r\n          <div className=\"mapboxgl-popup-tip\"></div>\r\n          <div className=\"mapboxgl-popup-content\">\r\n            <div\r\n              className=\"maphub-popup-inner maphub-popup-text ps\"\r\n              style={{ maxHeight: 411 + \"px\", maxWidth: 840 + \"px\" }}\r\n            >\r\n              <span\r\n                className=\"closePanel\"\r\n                onClick={() => {\r\n                  this.props.closePanel();\r\n                }}\r\n              >\r\n                X\r\n              </span>\r\n              <div className=\"nicetext\">\r\n                <div>\r\n                  <div className=\"nicetext-title panelTitle1\">\r\n                    <img className = \"impFlag\"src={stat?(stat.countryInfo? stat.countryInfo.flag : \"\") : \"\"}/>\r\n                    {\" \"}\r\n                    <span>{stat ? stat.country : \"\"}</span>\r\n                    \r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"panelTitle2\">Daily news</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"New recovered\",\r\n                    \"todayRecovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"New cases\",\r\n                    \"todayCases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkred\",\r\n                    \"New deaths\",\r\n                    \"todayDeaths\"\r\n                  )}\r\n                  <p className=\"panelTitle2\">Total</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"Total recovered\",\r\n                    \"recovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total deaths\",\r\n                    \"deaths\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"Total cases\",\r\n                    \"cases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total tests\",\r\n                    \"tests\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-x\"\r\n                style={{ left: 0 + \"px\", top: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-x\"\r\n                  tabIndex=\"0\"\r\n                  style={{ left: 0 + \"px\", width: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-y\"\r\n                style={{ top: 0 + \"px\", right: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-y\"\r\n                  tabIndex=\"0\"\r\n                  style={{ top: 0 + \"px\", height: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getPanelParagraph = (stat,color,label,field)=>{\r\n    return <p\r\n    style={{\r\n      color,\r\n       //borderTop: \"solid 1px\",\r\n      margin: \"2px 2px 2px 2px\",\r\n       //borderRadius: 6 + \"px\",\r\n      fontSize: 12+'px',\r\n      fontWeight: 'bold'\r\n    }}\r\n  >\r\n    \r\n    {label + \": \"}\r\n    {(stat && StringUtils.isNotEmpty(stat[field])) ? StringUtils.formatNumberToString(stat[field]) : \"0\"}\r\n\r\n  </p>\r\n  }\r\n}\r\n","\r\nconst constructData = (pays, statCovid19) => {\r\n    var result = [];\r\n    var i = 0;\r\n    pays.forEach((d) => {\r\n        var coordinate = {\r\n            longitude: d.longitude,\r\n            latitude: d.latitude\r\n        };\r\n\r\n        var object = {\r\n            id: i,\r\n            coordinate,\r\n            data: d,\r\n            stat: getStatByPays(d, statCovid19)\r\n        }\r\n        result.push(object);\r\n        i++;\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\nconst getStatByPays = (d, covid19) => {\r\n    let variable = covid19.filter(world => {\r\n        let countryTrimmed = world.country ? world.country.trim() : \"\";\r\n        return countryTrimmed === d.name\r\n    })\r\n    let countryData = variable[0];\r\n    if (countryData) {\r\n        return countryData\r\n    } else {\r\n        return {\r\n            country: d.name\r\n        };\r\n    }\r\n}\r\nexport default { constructData, getStatByPays };","import * as d3 from \"d3\";\r\nimport { Component } from \"react\";\r\nimport DataHelper from \"../../utils/DataHelper.js\";\r\nimport StringUtils from \"../../utils/StringUtils.js\";\r\nimport uihelper from '../../utils/UIHelper';\r\nimport \"./Region.css\";\r\nclass Region extends Component {\r\n\r\n  componentWillUnmount() {\r\n    d3.selectAll(\"#markersDeaths,#markersDesease\").remove();\r\n    //.attr(\"visibility\", \"hidden\").style(\"opacity\",0);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { countries, covid19, context } = this.props;\r\n    this.drawCircles(countries, covid19, context);\r\n    //add zoom\r\n    return \"\";\r\n  }\r\n\r\n\r\n  //Create the world map\r\n  drawCircles = (countries, covid19, context) => {\r\n    let markers ;\r\n    if(context.checkZoneDesease){\r\n      markers = d3.selectAll(\"#markersDesease\");\r\n      d3.selectAll(\"#markersDeaths\").attr(\"visibility\", \"hidden\");\r\n    }\r\n    if(context.checkToggleBTn){\r\n      markers = d3.selectAll(\"#markersDeaths\");\r\n      d3.selectAll(\"#markersDesease\").attr(\"visibility\", \"hidden\");\r\n    }\r\n    if (markers.empty()) {\r\n      var gGlobal = d3.select(\"#gWrapper\");\r\n      //Draw Medias\r\n      this.drawZoneByContext(gGlobal, countries, covid19, context);\r\n      this.drawDimondPrincess(gGlobal, countries, covid19);\r\n    } \r\n    // else {\r\n    //   markers.attr(\"visibility\", \"visible\").style(\"opacity\",1);\r\n    // }\r\n  };\r\n\r\n  drawDimondPrincess = (node, countries, covid19) => {\r\n    let dimondPrincess = countries.filter(e => {\r\n      return e.country == \"DP\";\r\n    });\r\n    let statDP = DataHelper.getStatByPays(\r\n      { name: \"Diamond Princess\" },\r\n      covid19\r\n    );\r\n  };\r\n\r\n  //Add Markers Function\r\n  drawZoneByContext = (node, countries, covid19, context) => {\r\n    let data = DataHelper.constructData(countries, covid19);\r\n    var markers;\r\n    let dataFiltered = this.filterCountriesByContext(data, context);\r\n    if (dataFiltered) {\r\n      markers = node\r\n        .append(\"g\")\r\n        .attr(\"id\", this.getMarkerId(context))\r\n      markers\r\n        .selectAll(\"circle\")\r\n        .data(dataFiltered)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .on(\"click\", (d, i) => {\r\n          this.props.clickOnCircle(d);\r\n        })\r\n        .attr(\"key\", d => `marker-${d.id}`)\r\n        .attr(\"cx\", d => {\r\n          return this.getCx(d);\r\n        })\r\n        .attr(\"cy\", d => {\r\n          return this.getCy(d);\r\n        })\r\n        .attr(\"r\", d => {\r\n          return uihelper.calculateRadius(d, context)/2  + \"px\";\r\n        })\r\n        .attr(\"class\", this.getClassByContext(context))\r\n        .append(\"title\")\r\n        .text(d => {\r\n          return `country : ${d.data.country} cases : ${d.stat.cases}`;\r\n        });\r\n    }\r\n    return markers;\r\n  };\r\n\r\n  getClassByContext = (context)=>{\r\n    if(context.checkToggleBTn){\r\n      return \"marker-black\"\r\n    }else if(context.checkZoneDesease){\r\n      return \"marker-red\"\r\n    }\r\n    \r\n  }\r\n\r\n  getMarkerId = (context)=>{\r\n    if(context.checkToggleBTn){\r\n      return \"markersDeaths\"\r\n    }else if(context.checkZoneDesease){\r\n      return \"markersDesease\"\r\n    }\r\n    \r\n  }\r\n\r\n  filterCountriesByContext = (data, context) => {\r\n    let dataFiltered;\r\n    let dataSorted;\r\n    if (context.checkToggleBTn) {\r\n      dataFiltered = data.filter(\r\n        d =>\r\n          d.stat != null &&\r\n          d.stat.TotalDeaths != 0 &&\r\n          d.stat.TotalDeaths != null &&\r\n          d.data.country != \"DP\"\r\n      );\r\n      dataSorted = dataFiltered.sort((e1, e2) => {\r\n        var totalDeath1Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e1.stat.deaths),\r\n          10\r\n        );\r\n        var totalDeath2Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e2.stat.deaths),\r\n          10\r\n        );\r\n        return totalDeath2Int - totalDeath1Int;\r\n      });\r\n    } else if (context.checkZoneDesease) {\r\n      dataFiltered = data.filter(\r\n        d =>\r\n          d.stat != null &&\r\n          d.stat.ActiveCases != 0 &&\r\n          d.stat.ActiveCases != null &&\r\n          d.data.country != \"DP\"\r\n      );\r\n      dataSorted = dataFiltered.sort((e1, e2) => {\r\n        var activeCase1Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e1.stat.cases),\r\n          10\r\n        );\r\n        var activeCase2Int = parseInt(\r\n          StringUtils.deleteSpecialChar(e2.stat.cases),\r\n          10\r\n        );\r\n        return activeCase2Int - activeCase1Int;\r\n      });\r\n    }\r\n\r\n    return dataSorted;\r\n  };\r\n\r\n  getRadius = (d, context) => {\r\n\r\n    let cases;\r\n    if (context.checkToggleBTn) {\r\n      cases = StringUtils.deleteSpecialChar(d.stat.deaths);\r\n      return this.getRadiusDeath(cases)\r\n    } else if (context.checkZoneDesease) {\r\n      cases = StringUtils.deleteSpecialChar(d.stat.cases);\r\n      return this.getRadiusCases(cases)\r\n    }\r\n  };\r\n  getRadiusCases = (cases)=>{\r\n    let rayon = 0;\r\n    if (0 <= cases && cases < 1000) {\r\n      let r = (cases / 1000) * 5;\r\n      rayon = r;\r\n    } else if (1000 <= cases && cases < 5000) {\r\n      let r = (cases / 5000) * 10;\r\n      rayon = r;\r\n    } else if (5000 <= cases && cases < 10000) {\r\n      let r = (cases / 10000) * 20;\r\n      rayon = r;\r\n    } else if (10000 <= cases && cases < 60000) {\r\n      let r = (cases / 50000) * 50;\r\n      rayon = r;\r\n    }else if (60000 <= cases && cases < 100000) {\r\n      let r = (cases / 100000) * 60;\r\n      rayon = r;\r\n    }\r\n    \r\n    return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n  }\r\n  \r\n  getRadiusDeath = (cases)=>{\r\n    let rayon = 0;\r\n    if (0 <= cases && cases < 1000) {\r\n      let r = (cases / 1000) * 10;\r\n      rayon = r;\r\n    } else if (1000 <= cases && cases < 2000) {\r\n      let r = (cases / 2000) * 30;\r\n      rayon = r;\r\n    } else if (2000 <= cases && cases < 5000) {\r\n      let r = (cases / 5000) * 40;\r\n      rayon = r;\r\n    } else if (5000 <= cases && cases < 15000) {\r\n      let r = (cases / 5000) * 45;\r\n      rayon = r;\r\n    }\r\n    \r\n    return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n  }\r\n  getCx = d => {\r\n    if (StringUtils.isNotEmpty(d)) {\r\n      var x = d.coordinate.latitude;\r\n      var y = d.coordinate.longitude;\r\n\r\n      var coordinate = [x, y];\r\n      return this.projection()(coordinate)[0];\r\n    }\r\n  };\r\n\r\n  getCy = d => {\r\n    if (StringUtils.isNotEmpty(d)) {\r\n      var x = d.coordinate.latitude;\r\n      var y = d.coordinate.longitude;\r\n      var coordinate = [x, y];\r\n      return this.projection()(coordinate)[1];\r\n    }\r\n  };\r\n\r\n  //get node color\r\n  getNodeColor = (id, media) => {\r\n    var childsCount = media.filter(d => d.id === id).length;\r\n    if (childsCount == 0) {\r\n      return \"rgba(65, 131, 215, 1)\";\r\n    } else {\r\n      return \"rgba(214, 69, 65, 1)\";\r\n    }\r\n  };\r\n\r\n  //Projection and path calculator\r\n  projection() {\r\n    var geoMercator = d3\r\n    .geoMercator()\r\n    .center([0,-60])\r\n    .scale(80)\r\n    .translate([800 / 2, 650 / 2]);\r\n\r\n    var projection2 = d3\r\n      .geoOrthographic()\r\n      .scale(300)\r\n      .precision(0.1);\r\n    var projection3 = d3\r\n      .geoConicEqualArea()\r\n      .scale(150)\r\n      .center([0, 33])\r\n      //.translate([width / 2, height / 2])\r\n      .precision(0.3);\r\n    return geoMercator;\r\n  }\r\n  \r\n}\r\n\r\nexport default Region;\r\n","export default __webpack_public_path__ + \"static/media/countries.9e8d431d.tsv\";","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport { feature } from \"topojson-client\";\r\nimport CoronaMapView from \"../mapD3/CoronaMapView\";\r\nimport Panel from \"../../panelchart/Panel\";\r\nimport Region from \"../../region/Region\";\r\nimport DataHelper from \"../../../utils/DataHelper.js\";\r\nimport countries110 from \"../../../countries-110m.json\";\r\nimport countries from \"../data/countries.tsv\";\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      worldData: [],\r\n      jsonData: [],\r\n      countries: [],\r\n      pieOpacity: 0,\r\n      panelOpacity: 0,\r\n\r\n      context: {\r\n        checkToggleBTn: false,\r\n        checkZoneDesease: false\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let worldData = countries110;\r\n\r\n    this.setState({\r\n      worldData: feature(worldData, worldData.objects.countries).features,\r\n      jsonData: worldData\r\n    });\r\n\r\n    d3.tsv(countries).then((response, error) => {\r\n      this.setState({\r\n        countries: response\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      worldData,\r\n      jsonData,\r\n      countries,\r\n      panelOpacity,\r\n      context\r\n    } = this.state;\r\n    const { covid19 } = this.props;\r\n    let zoneDeaths = \"\";\r\n\r\n    if (context && (context.checkToggleBTn || context.checkZoneDesease)) {\r\n      zoneDeaths = (\r\n        <Region\r\n          context = {context}\r\n          worldData={worldData}\r\n          countries={countries}\r\n          covid19={covid19}\r\n          clickOnCircle={d => {\r\n            this.clickOnCircle(d);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    if (jsonData.length != 0 && covid19) {\r\n      return (\r\n        <div>\r\n          <CoronaMapView\r\n            worldData={worldData}\r\n            jsonData={jsonData}\r\n            closePanel={() => {\r\n              this.closePanelDetails();\r\n            }}\r\n            countries={countries}\r\n            covid19={covid19}\r\n            clickOnCountry={d => {\r\n              this.clickOnCountry(d);\r\n            }}\r\n          />\r\n          {zoneDeaths}\r\n          <Panel\r\n            opacity={panelOpacity}\r\n            zIndex={this.state.panelZindex}\r\n            stat={this.state.stat}\r\n            closePanel={() => {\r\n              this.closePanelDetails();\r\n            }}\r\n            x={this.state.x}\r\n            y={this.state.y}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  }\r\n\r\n  getData = data => {\r\n    if (data) {\r\n      return [data.ActiveCases, data.TotalDeaths, data.TotalRecovered];\r\n    } else {\r\n      return [0];\r\n    }\r\n  };\r\n\r\n  clickOnCountry = d => {\r\n    \r\n\r\n    let stat = {};\r\n    let covid19 = this.props.covid19;\r\n    if (d) {\r\n      stat = DataHelper.getStatByPays({ name: d.properties.name }, covid19);\r\n    } else {\r\n      stat = DataHelper.getStatByPays({ name: \"Morocco\" }, covid19);\r\n    }\r\n    let position = this.getPositionPanel();\r\n    this.setState({\r\n      panelOpacity: 1,\r\n      panelZindex: 1,\r\n      stat: stat,\r\n      x: position.x,\r\n      y: position.y \r\n    });\r\n    this.sendSvgToBackground();\r\n    this.props.onclick(d)\r\n  };\r\n\r\n  getPositionPanel = ()=>{\r\n    let panelStatDim = d3.selectAll(\"#panelStat\").node().getBoundingClientRect();\r\n    let headerDim = d3.selectAll(\"#header\").node().getBoundingClientRect();\r\n    let x = d3.event.pageX - (panelStatDim.width / 2) - 15\r\n    let y = d3.event.pageY - panelStatDim.height -headerDim.height;\r\n    return {x,y}\r\n  }\r\n\r\n  sendSvgToBackground = () => {\r\n    d3.selectAll(\"#worldMap\").style(\"opacity\", 0.3);\r\n  };\r\n\r\n  sendSvgToFrontPage = () => {\r\n    d3.selectAll(\"#worldMap\").style(\"opacity\", 1);\r\n  };\r\n\r\n  closePanelDetails = () => {\r\n    this.setState({\r\n      panelOpacity: 0,\r\n      panelZindex: -1\r\n    });\r\n    this.sendSvgToFrontPage();\r\n    this.props.initGlobalStat();\r\n  };\r\n}\r\n\r\nexport default Container;\r\n","import * as React from \"react\";\r\nimport Container from \"../../components/coronadash/container/Container\";\r\nimport { CountryDailyInfo } from \"../../models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport './page1.css';\r\n\r\n\r\ninterface Props {\r\n  dataset: CountryDailyInfo[];\r\n  totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n  countryClicked: any;\r\n}\r\nexport class Page1 extends React.Component<Props, State>{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryClicked: undefined,\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div id=\"mapWW\" className=\"col\" style={{ height: window.screen.height + \"px\" }}>\r\n          <Container\r\n            covid19={this.props.dataset}\r\n            onclick={(d) => this.onclickCountry(d)}\r\n            initGlobalStat={() => {\r\n              this.initGlobalStat();\r\n            }}\r\n          ></Container>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onclickCountry = (d) => {\r\n    var dataset = this.props.dataset;\r\n    var countryFiltered;\r\n    if (!d) {\r\n      countryFiltered = dataset.filter((elt) => {\r\n        return elt.country == \"Morocco\";\r\n      })\r\n    } else {\r\n      countryFiltered = dataset.filter((elt) => {\r\n        return elt.country == d.properties.name;\r\n      })\r\n    }\r\n    this.setState({\r\n      countryClicked: countryFiltered[0]\r\n    })\r\n  }\r\n\r\n\r\n  initGlobalStat = () => {\r\n    this.setState({\r\n      countryClicked: undefined\r\n    })\r\n  }\r\n}","export const columnsSchema = [\r\n    {\r\n      field: \"countryInfo\",\r\n      headerName: \"ID\",\r\n      width: 50,\r\n      valueGetter: (params) => `${params.row.countryInfo.iso3}`,\r\n    },\r\n    { field: \"country\", headerName: \"Country name\", width: 150 },\r\n    { field: \"continent\", headerName: \"Continent\", width: 130 },\r\n    {\r\n      field: \"cases\",\r\n      headerName: \"Total cases\",\r\n      width: 150,\r\n      editable: false,\r\n    },\r\n    {\r\n      field: \"todayCases\",\r\n      headerName: \"Today cases\",\r\n      width: 120,\r\n      editable: false,\r\n    },\r\n    {\r\n      field: \"todayDeaths\",\r\n      headerName: \"Today deaths\",\r\n      description: \"\",\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"deaths\",\r\n      headerName: \"Total deaths\",\r\n      type: \"number\",\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"todayRecovered\",\r\n      headerName: \"Today recovered\",\r\n      sortable: true,\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"recovered\",\r\n      headerName: \"Total recovered\",\r\n      sortable: true,\r\n      width: 120,\r\n    },\r\n  ];","import { DataGrid } from '@mui/x-data-grid';\r\nimport * as React from 'react';\r\nimport { CountryDailyInfo } from '../../models/CountryDailyInfo';\r\nimport './DataTable.css';\r\nimport { columnsSchema } from './schema/schema';\r\n\r\ninterface Props{\r\n  data: CountryDailyInfo[];\r\n}\r\ninterface State{\r\n  \r\n}\r\nexport class DataTable extends React.Component<Props,State>{\r\n\r\n  render(){\r\n    return (\r\n      <div className='data-table'>\r\n        <DataGrid\r\n          rows={this.props.data}\r\n          columns={columnsSchema}\r\n          pageSize={20}\r\n          rowsPerPageOptions={[5]}\r\n          checkboxSelection\r\n          disableSelectionOnClick\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { JsonConvert } from \"json2typescript\";\r\nimport * as React from \"react\";\r\nimport { CountryDailyInfo } from \"../../models/CountryDailyInfo\";\r\nimport { DataTable } from \"../../components/table/DataTable\";\r\n\r\ninterface Props {\r\n    dataset : CountryDailyInfo[];\r\n}\r\nexport class Page2 extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n          let jsonConvert: JsonConvert = new JsonConvert();\r\n          let coutriesDailyinfo : CountryDailyInfo[] = jsonConvert.deserializeArray(this.props.dataset, CountryDailyInfo);\r\n        return (\r\n            <div>\r\n                <DataTable data={coutriesDailyinfo}></DataTable>\r\n            </div>\r\n        )\r\n    }\r\n}","import {\r\n    BarElement,\r\n    CategoryScale, Chart as ChartJS, Legend, LinearScale, Title,\r\n    Tooltip\r\n} from 'chart.js';\r\nimport * as React from \"react\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { format } from \"date-fns\";\r\nimport TimeRange from \"react-timeline-range-slider\";\r\n\r\nimport {\r\n    selectedInterval,\r\n    disabledIntervals,\r\n    timelineInterval\r\n} from \"./datesSource\";\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\ninterface Props {\r\n    options: any;\r\n    data: any;\r\n}\r\nexport class BarChart extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n    errorHandler = ({ error }) => this.setState({ error });\r\n\r\n    onChangeCallback = (selectedInterval) => this.setState({ selectedInterval });\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className='graph'>\r\n                    <Bar\r\n                        {...this.props}\r\n                    />\r\n                </div>\r\n                {/* <div>\r\n                    <TimeRange\r\n                        // error={error}\r\n                        ticksNumber={36}\r\n                        selectedInterval={selectedInterval}\r\n                        timelineInterval={timelineInterval}\r\n                        onUpdateCallback={this.errorHandler}\r\n                        onChangeCallback={this.onChangeCallback}\r\n                        disabledIntervals={disabledIntervals}\r\n                    />\r\n                </div>\r\n                <div className=\"info\">\r\n                    <span>Selected Interval: </span>\r\n                    {selectedInterval.map((d, i) => (\r\n                        <span key={i}>{format(d, \"dd MMM, HH:mm\")}</span>\r\n                    ))}\r\n                </div> */}\r\n            </>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport { BarChart } from \"../../components/barChart/BarChart\";\r\nimport { SelectRange } from \"../../components/select/Select\";\r\nimport { SelectOptions } from \"../../dto/selectOptions\";\r\nimport { HistoricalCountry } from '../../models/historical/HistoricalCountry';\r\nimport { getHistoricalDataByCountryAndPeriod } from '../../services/covidNinja/NinjaService';\r\nimport { jsonConvert } from '../../utils/Constants';\r\nimport './Page3.css';\r\ninterface State {\r\n    countryHistoricalData : HistoricalCountry;\r\n    loaded : boolean;\r\n}\r\ninterface Props{\r\n    countriesRef : SelectOptions[];\r\n}\r\nenum DailyNewsTypes{\r\n    DEATHS=\"deaths\",\r\n    CASES=\"cases\",\r\n    RECOVERED = \"recovered\"\r\n}\r\nexport class Page3 extends React.Component<Props, State>{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...this.state,\r\n            loaded: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let interval = 365*2;\r\n        getHistoricalDataByCountryAndPeriod('ma',interval).then((response)=>{\r\n            let countryHistoricalData : HistoricalCountry = jsonConvert().deserializeObject(response, HistoricalCountry);\r\n                    this.setState({\r\n                        ...this.state,\r\n                        countryHistoricalData: countryHistoricalData,\r\n                        loaded:true\r\n            })\r\n        })\r\n    }\r\n\r\n    getOptions = (graphTitle : string) => {\r\n        return {\r\n            responsive: true,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top' as const,\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: graphTitle,\r\n                },\r\n            },\r\n        };\r\n    };\r\n\r\n\r\n    getLabels = ()=>{\r\n        let data : HistoricalCountry = this.state.countryHistoricalData;\r\n        let casesAsMAp = new Map(Object.entries(data.timeline.cases));    \r\n        let labels = [ ...casesAsMAp.keys() ];\r\n        return labels;\r\n    }\r\n\r\n    getCountryDeathsData = ()=>{\r\n        //morocco\r\n        let maHistData : HistoricalCountry = this.state.countryHistoricalData;\r\n        let countryDeathsAsMap = new Map(Object.entries(maHistData.timeline.deaths));\r\n        let countryDeaths = [ ...countryDeathsAsMap.values()];\r\n\r\n        //TODO\r\n        let countryDeathsPerDay = countryDeaths.map((v,i,array)=>{\r\n            return i>0 ? Math.abs(v - array[i - 1]) : 0;\r\n        })\r\n        console.log(countryDeathsPerDay)\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: 'deaths',\r\n                    data: countryDeathsPerDay,//tnValuePerDay\r\n                    borderColor: 'rgb(53, 162, 235)',\r\n                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                },\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n\r\n    getCountryCasesData = ()=>{\r\n        //country hist data\r\n        let countryHistData : HistoricalCountry = this.state.countryHistoricalData;\r\n        let countryCasesAsMap = new Map(Object.entries(countryHistData.timeline.cases));   \r\n        let countryCases = [ ...countryCasesAsMap.values()];\r\n        //TODO\r\n        let countryCasesPerDay = countryCases.map((v,i,array)=>{\r\n            return i>0 ? Math.abs(v - array[i - 1]) : 0;\r\n        })\r\n        \r\n\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: 'cases',\r\n                    data: countryCasesPerDay,//maValuePerDay\r\n                    borderColor: 'rgb(255, 99, 132)',\r\n                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                }\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n\r\n    getTotalDataByType = (_x:DailyNewsTypes)=>{\r\n        //morocco\r\n        let countryHistData : HistoricalCountry = this.state.countryHistoricalData;\r\n        let countryDeathsAsMap = new Map(Object.entries(countryHistData.timeline[_x]));   \r\n        let countryDeathsValues = [ ...countryDeathsAsMap.values()];\r\n\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: 'country total '+(_x==DailyNewsTypes.DEATHS?'deaths':'cases')+' per day',\r\n                    data: countryDeathsValues,//maValuePerDay\r\n                    borderColor: 'rgb(53, 162, 235)',\r\n                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                },\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n    handleChangeSelect = (e : SelectOptions)=>{\r\n        let interval = 365*3;\r\n        getHistoricalDataByCountryAndPeriod(e.value,interval).then((response)=>{\r\n            let countryHistoricalData : HistoricalCountry = jsonConvert().deserializeObject(response, HistoricalCountry);\r\n                    this.setState({\r\n                        ...this.state,\r\n                        countryHistoricalData,\r\n                        loaded:true\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        if(!this.state.loaded){\r\n            return null;\r\n        }\r\n        return (\r\n            <div className='container'>\r\n                \r\n                <div className='row'>\r\n                    <div className=\"select\" >\r\n                        <SelectRange\r\n                            options={this.props.countriesRef}\r\n                            onChange={(e) => this.handleChangeSelect(e as SelectOptions)} \r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country cases evolution\")} data={this.getCountryCasesData()}/>\r\n                    </div>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country deaths evolution\")} data={this.getCountryDeathsData()}/>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country cases accumulation\")} data={this.getTotalDataByType(DailyNewsTypes.CASES)}/>\r\n                    </div>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country deaths accumulation\")} data={this.getTotalDataByType(DailyNewsTypes.DEATHS)}/>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className=\"col\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    //Legacy\r\n    getTotalCasesData = ()=>{\r\n        //morocco\r\n        let maHistData : HistoricalCountry = this.state.countryHistoricalData;\r\n        let maCasesAsMap = new Map(Object.entries(maHistData.timeline.cases));   \r\n        let keys = [ ...maCasesAsMap.keys()];//common\r\n        let maValues = [ ...maCasesAsMap.values()];\r\n\r\n        //TODO\r\n        let maValuePerDay = maValues.map((v,i,array)=>{\r\n            return i>0 ? v - array[i - 1] : 0;\r\n        })\r\n\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: 'Morocco cases per day',\r\n                    data: maValues,//maValuePerDay\r\n                    borderColor: 'rgb(255, 99, 132)',\r\n                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                },\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from 'react-select/animated';\r\nimport { SelectOptions } from \"../../dto/selectOptions\";\r\n\r\n\r\ninterface Props {\r\n    options: SelectOptions[];\r\n    onChange: any;\r\n}\r\nconst animatedComponents = makeAnimated();\r\n\r\nexport class SelectRange extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Select\r\n            closeMenuOnSelect={false}\r\n            components={animatedComponents}\r\n            //defaultValue={[colourOptions[4], colourOptions[5]]}\r\n            // isMulti\r\n            options={this.props.options}\r\n            onChange={(e) => this.props.onChange(e)} />\r\n        )\r\n    }\r\n}","import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"timeline\")\r\nexport class Timeline {\r\n  @JsonProperty(\"cases\")\r\n  cases: Map<string, string>;\r\n  @JsonProperty(\"deaths\")\r\n  deaths: Map<string, string>;\r\n  @JsonProperty(\"recovered\")\r\n  recovered: Map<string, string>;\r\n\r\n  constructor() {\r\n    this.cases = new Map();\r\n    this.deaths = new Map();\r\n    this.recovered = new Map();\r\n  }\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\nimport { Timeline } from \"./Timeline\";\r\n\r\n@JsonObject(\"HistoricalCountry\")\r\nexport class HistoricalCountry {\r\n\r\n    @JsonProperty(\"country\")\r\n    country : string;\r\n    @JsonProperty(\"province\")\r\n    province : Array<string>;\r\n    @JsonProperty(\"timeline\")\r\n    timeline : Timeline;\r\n\r\n\r\n\tconstructor() {\r\n        this.country = '';\r\n        this.province= [];\r\n        this.timeline= new Timeline();\r\n\t}\r\n\r\n}","\r\nconst URL_DATA_TODAY : string = \"https://corona.lmao.ninja/v2/countries?today&sort\";\r\nconst URL_DATA_TODAY_TOTAL : string = \"https://corona.lmao.ninja/v2/all?today\";\r\nconst URL_HIST_DATA : string = 'https://corona.lmao.ninja/v3/covid-19/historical';//ma?lastdays=1\r\n\r\n\r\n    export const getTodayCovidData = ()=>{\r\n        return fetch(URL_DATA_TODAY).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getTodayTotalCovidData  = ()=>{\r\n        return fetch(URL_DATA_TODAY_TOTAL).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getHistoricalDataByCountryAndPeriod  = (countryName : string,period?: number)=>{\r\n        let url : string = URL_HIST_DATA+'/'+countryName + (period? '?lastdays='+period : '');\r\n        return fetch(url).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getGlobalHistoricalDataByPeriod  = (period: number)=>{\r\n        let url : string = URL_HIST_DATA+'/all' + (period? '?lastdays='+period : '');\r\n        return fetch(url).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }","import { JsonConvert, ValueCheckingMode } from \"json2typescript\";\r\n\r\nexport const WS_ISO2 = \"EH\";\r\n\r\nexport const jsonConvert = (): JsonConvert => {\r\n    let jsonConvert: JsonConvert = new JsonConvert();\r\n    jsonConvert.ignorePrimitiveChecks = false;\r\n    jsonConvert.valueCheckingMode = ValueCheckingMode.ALLOW_NULL;\r\n    return jsonConvert;\r\n};","export class SelectOptions {\r\n  value: string;\r\n  label: string;\r\n\r\n  constructor(value:string,label:string) {\r\n    this.value = value;\r\n    this.label =label;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport { CountryDailyInfo } from \"../models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"../models/TotalInfo\";\r\nimport { About } from \"../pages/about/About\";\r\nimport { Home } from \"../pages/home/home\";\r\nimport { Page1 } from \"../pages/page1/Page1\";\r\nimport { Page2 } from \"../pages/page2/Page2\";\r\nimport { Page3 } from \"../pages/page3/Page3\";\r\nimport { getCountryFromDataset } from \"../utils/countries\";\r\n\r\ninterface Props {\r\n    dataset: CountryDailyInfo[];\r\n    totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n\r\n}\r\nexport class Navigation extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Routes>\r\n                    <Route\r\n                        path={\"/\"}\r\n                        element={\r\n                            <Home totalInfo={this.props.totalInfo}/>\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path={\"/map\"}\r\n                        element={\r\n                            <Page1 dataset={this.props.dataset} totalInfo={this.props.totalInfo} />\r\n                        }\r\n                    />\r\n                    <Route path={\"/stat\"} element={<Page2 dataset={this.props.dataset} />} />\r\n                    <Route path={\"/charts\"} element={<Page3 countriesRef={getCountryFromDataset(this.props.dataset)} />} />\r\n                    <Route path={\"/about\"} element={<About />} />\r\n                </Routes>\r\n            </>\r\n        )\r\n    }\r\n}","import { CountryDailyInfo } from \"../models/CountryDailyInfo\"\r\nimport { SelectOptions } from \"../dto/selectOptions\"\r\n\r\nexport const getCountryFromDataset = (dataset : CountryDailyInfo[])=>{\r\n        return dataset.map((elt : CountryDailyInfo)=>{\r\n            let label = elt.country;\r\n            let value = elt.countryInfo?.iso2;\r\n            return new SelectOptions(value,label);\r\n        })\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { CountryDailyInfo } from \"./models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"./models/TotalInfo\";\r\nimport { Footer } from \"./pages/footer/footer\";\r\nimport { Header } from \"./pages/header/header\";\r\nimport { Navigation } from \"./routes/navigation\";\r\nimport { getTodayCovidData, getTodayTotalCovidData } from \"./services/covidNinja/NinjaService\";\r\nimport { jsonConvert, WS_ISO2 } from \"./utils/Constants\";\r\n\r\ninterface State {\r\n  allCoutriesDailyinfo: CountryDailyInfo[];\r\n  totalInfo: TotalInfo;\r\n  isDataLoaded: boolean;\r\n}\r\n\r\nexport default class App extends Component<Readonly<{}>,State> {\r\n  \r\n  constructor(props ) {\r\n    super(props);\r\n    this.state = {\r\n      ...this.state,\r\n      isDataLoaded: false\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    getTodayCovidData().then((response) => {\r\n      let allDataExceptWS = response.filter((d : CountryDailyInfo) => {\r\n        return d.countryInfo.iso2 !== WS_ISO2;\r\n      });\r\n      let allCoutriesDailyinfo : CountryDailyInfo[] = jsonConvert().deserializeArray(allDataExceptWS, CountryDailyInfo);\r\n      getTodayTotalCovidData().then((response) => {\r\n        let totalInfo : TotalInfo = jsonConvert().deserializeObject(response, TotalInfo);\r\n        this.setState({\r\n          allCoutriesDailyinfo,\r\n          totalInfo,\r\n          isDataLoaded: true,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  render(){\r\n    if (!this.state.isDataLoaded) {\r\n      return \"\";\r\n    }\r\n    console.log(\"App render\");\r\n    console.log(\"v104\");\r\n    return (\r\n      <div\r\n        className=\"container-fluid\"\r\n      >\r\n        <div id=\"header\" className=\"row\">\r\n          <Header />\r\n        </div>\r\n        <div className=\"main\">\r\n          <Navigation dataset={this.state.allCoutriesDailyinfo} totalInfo={this.state.totalInfo}/>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// window.screen.orientation.lock('landscape');\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter >\r\n            <App />\r\n        </HashRouter>\r\n    </React.StrictMode>\r\n, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}