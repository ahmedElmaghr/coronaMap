{"version":3,"sources":["components/loading/loading.tsx","models/CountryInfo.ts","models/CountryDailyInfo.ts","models/TotalInfo.ts","services/covidNinja/NinjaService.ts","utils/Constants.ts","pages/footer/footer.tsx","components/navBar/navbar.tsx","pages/header/header.tsx","pages/about/About.tsx","utils/dateUtils.ts","utils/StringUtils.js","utils/UIHelper.js","components/card/Card.tsx","components/card/Cards.tsx","assets/images/world-map-covid19.jpg","pages/home/home.tsx","components/hoc/withTopologicalData.tsx","components/coronadash/mapD3/Legend.js","components/panelchart/Panel.js","utils/DataHelper.js","components/coronadash/mapD3/CoronaMapView.js","pages/page1/Page1.tsx","components/table/schema/schema.ts","components/table/DataTable.tsx","pages/page2/Page2.tsx","components/barChart/BarChart.tsx","pages/page3/Page3.tsx","components/timeRange/TimeRangePicker.tsx","components/select/Select.tsx","models/historical/Timeline.ts","models/historical/HistoricalCountry.ts","components/hoc/withDataLoader.tsx","dto/selectOptions.ts","routes/navigation.tsx","utils/countries.ts","App.tsx","serviceWorker.js","index.js"],"names":["Loading","props","active","className","CountryInfo","JsonObject","JsonProperty","Number","String","this","_id","iso2","iso3","lat","long","flag","CountryDailyInfo","id","updated","country","countryInfo","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","critical","tests","population","continent","TotalInfo","affectedCountries","URL_HIST_DATA","getHistoricalDataByCountryAndPeriod","countryName","period","fetch","then","data","json","jsonConvert","JsonConvert","ignorePrimitiveChecks","valueCheckingMode","ValueCheckingMode","ALLOW_NULL","Footer","href","style","color","React","Navbar","type","to","Header","About","formatEpochDateToDate","epoch","Date","toUTCString","entity","num","toString","replace","value","separator","end","duration","Card","uihelper","title","Component","Cards","totalInfo","totalConfirmed","activeCases","totalDeaths","contentStyle","icon","titleStyle","Home","getPieData","totalCases","handleMapLinkMouseEnter","setState","state","display","handleMapLinkMouseLeave","flex","textAlign","onMouseEnter","onMouseLeave","src","mapImage","alt","opacity","withTopologicalData","WrappedComponent","useState","worldData","setWorldData","jsonData","setJsonData","useEffect","feature","countries110","objects","countries","features","Object","keys","length","covid19","initGlobalStat","Legend","svg","d3","append","attr","text","height","width","zIndex","Panel","handleClick","e","node","contains","target","handleClickOutside","tagName","closePanel","getPanelParagraph","stat","label","field","margin","fontSize","fontWeight","StringUtils","document","addEventListener","removeEventListener","console","log","x","y","ref","top","left","maxHeight","maxWidth","onClick","tabIndex","right","getStatByPays","d","countryData","filter","world","trim","name","constructData","pays","statCovid19","result","i","forEach","coordinate","longitude","latitude","object","push","viewBox","borderColor","mergeMorrocanSahara","g","morocco","geometries","morrocanSahara","toBeMerged","datum","merge","calculatePath","getMoroccoCountryColor","on","clickOnCountry","morrocanTodayCases","c","getCountryColor","addCountriesName","selectAll","enter","path","centroid","properties","panelStat","DataHelper","panelPosition","getPositionPanel","prevState","panelInfo","panelStatDim","getBoundingClientRect","headerDim","pageX","pageY","handleMouseOut","closePanelDetails","drawMap","markDesease","elt","dailyNewCase","dailyCase","addZoom","call","scaleExtent","translateExtent","extent","zoomed","transform","placeLabel","k","projection","geoMercator","center","scale","translate","precision","gGlobal","drawSvgWrapper","wrapper","window","screen","Page1","onMouseMoveOverCountry","countryFiltered","dataset","countryClicked","undefined","columnsSchema","headerName","valueGetter","params","row","editable","description","sortable","DataTable","headerHeight","element","getElementById","offsetHeight","rows","columns","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","Page2","coutriesDailyinfo","deserializeArray","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","DailyNewsTypes","BarChart","TimeRangePicker","errorHandler","error","onChangeCallback","selectedInterval","updateTimeRange","formaTick","ms","format","disabledIntervals","start","startTime","endTime","step","timelineInterval","onUpdateCallback","formatTick","animatedComponents","makeAnimated","SelectRange","closeMenuOnSelect","components","options","onChange","Timeline","Map","HistoricalCountry","province","timeline","firstCovidDate","selectedStartInit","selectedEndInit","Page3","getOptions","graphTitle","responsive","plugins","legend","position","getLabels","startDate","endDate","countryHistoricalData","casesAsMAp","entries","it","itAsDate","getDailyDataByType","_x","countryHistData","countryDailyDataAsMap","countryDataPerDay","map","v","array","Math","abs","labels","datasets","CASES","backgroundColor","getTotalDataByType","countryDeathsAsMap","countryDeathsValues","values","DEATHS","handleChangeSelect","isDataLoaded","response","deserializeObject","countDaysFromStartDay","timeInMilisec","getTime","ceil","countriesRef","SelectOptions","Navigation","App","allCoutriesDailyinfo","withDataLoader","setActive","Array","setAllCoutriesDailyinfo","setTotalInfo","allDataExceptWS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad3678bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FaSpinner } from 'react-icons/fa';\r\nimport './loading.css';\r\n\r\nconst Loading = (props: { active: boolean }) => {\r\n    if (props.active) {\r\n        return (\r\n            <div className='loading'>\r\n                <FaSpinner className='spinner' />\r\n            </div>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport default Loading;","import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"CountryInfo\")\r\nexport class CountryInfo {\r\n  @JsonProperty(\"_id\", Number)\r\n  _id: number;\r\n  @JsonProperty(\"iso2\", String)\r\n  iso2: string;\r\n  @JsonProperty(\"iso3\", String)\r\n  iso3: string;\r\n  @JsonProperty(\"lat\", Number)\r\n  lat: number;\r\n  @JsonProperty(\"long\", Number)\r\n  long: number;\r\n  @JsonProperty(\"flag\", String)\r\n  flag: string;\r\n\r\n  constructor() {\r\n    this._id = 0;\r\n    this.iso2 = \"\";\r\n    this.iso3 = \"\";\r\n    this.lat = 0;\r\n    this.long = 0;\r\n    this.flag = \"\";\r\n  }\r\n\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\nimport { CountryInfo } from \"./CountryInfo\";\r\n\r\n@JsonObject(\"CountryDailyInfo\")\r\nexport class CountryDailyInfo {\r\n  @JsonProperty(\"country\", String)\r\n  id: string;\r\n  \r\n  @JsonProperty(\"updated\", Number)\r\n  updated: number;\r\n  @JsonProperty(\"country\", String)\r\n  country: string;\r\n  @JsonProperty(\"countryInfo\")\r\n  countryInfo : CountryInfo;\r\n  @JsonProperty(\"cases\", Number)\r\n  cases: number;\r\n  @JsonProperty(\"todayCases\", Number)\r\n  todayCases: number;\r\n  @JsonProperty(\"deaths\", Number)\r\n  deaths: number;\r\n  @JsonProperty(\"todayDeaths\", Number)\r\n  todayDeaths: number;\r\n  @JsonProperty(\"recovered\", Number)\r\n  recovered: number;\r\n  @JsonProperty(\"todayRecovered\", Number)\r\n  todayRecovered: number;\r\n  @JsonProperty(\"active\", Number)\r\n  active: number;\r\n  @JsonProperty(\"critical\", Number)\r\n  critical: number;\r\n  @JsonProperty(\"tests\", Number)\r\n  tests: number;\r\n  @JsonProperty(\"population\", Number)\r\n  population: number;\r\n  @JsonProperty(\"continent\", String)\r\n  continent: string;\r\n\r\n  constructor() {\r\n      this.id = \"\";\r\n    this.updated = 0;\r\n    this.country = \"\";\r\n    this.countryInfo = new CountryInfo();\r\n    this.cases = 0;\r\n    this.todayCases = 0;\r\n    this.deaths = 0;\r\n    this.todayDeaths = 0;\r\n    this.recovered = 0;\r\n    this.todayRecovered = 0;\r\n    this.active = 0;\r\n    this.critical = 0;\r\n    this.tests = 0;\r\n    this.population = 0;\r\n    this.continent = \"\";\r\n  }\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"TotalInfo\")\r\nexport class TotalInfo {\r\n  @JsonProperty(\"updated\", Number)\r\n  updated: number;\r\n  @JsonProperty(\"affectedCountries\", Number)\r\n  affectedCountries: number;\r\n  @JsonProperty(\"cases\", Number)\r\n  cases: number;\r\n  @JsonProperty(\"todayCases\", Number)\r\n  todayCases: number;\r\n  @JsonProperty(\"deaths\", Number)\r\n  deaths: number;\r\n  @JsonProperty(\"todayDeaths\", Number)\r\n  todayDeaths: number;\r\n  @JsonProperty(\"recovered\", Number)\r\n  recovered: number;\r\n  @JsonProperty(\"todayRecovered\", Number)\r\n  todayRecovered: number;\r\n  @JsonProperty(\"active\", Number)\r\n  active: number;\r\n  @JsonProperty(\"critical\", Number)\r\n  critical: number;\r\n  @JsonProperty(\"tests\", Number)\r\n  tests: number;\r\n  @JsonProperty(\"population\", Number)\r\n  population: number;\r\n\r\n  constructor() {\r\n    this.updated = 0;\r\n    this.affectedCountries = 0;\r\n    this.cases = 0;\r\n    this.todayCases = 0;\r\n    this.deaths = 0;\r\n    this.todayDeaths = 0;\r\n    this.recovered = 0;\r\n    this.todayRecovered = 0;\r\n    this.active = 0;\r\n    this.critical = 0;\r\n    this.tests = 0;\r\n    this.population = 0;\r\n  }\r\n}\r\n","\r\nconst URL_DATA_TODAY : string = \"https://corona.lmao.ninja/v2/countries?today&sort\";\r\nconst URL_DATA_TODAY_TOTAL : string = \"https://corona.lmao.ninja/v2/all?today\";\r\nconst URL_HIST_DATA : string = 'https://corona.lmao.ninja/v3/covid-19/historical';//ma?lastdays=1\r\n\r\n\r\n    export const getTodayCovidData = ()=>{\r\n        return fetch(URL_DATA_TODAY).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getTodayTotalCovidData  = ()=>{\r\n        return fetch(URL_DATA_TODAY_TOTAL).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getHistoricalDataByCountryAndPeriod  = (countryName : string,period?: number)=>{\r\n        let url : string = URL_HIST_DATA+'/'+countryName + (period? '?lastdays='+period : '');\r\n        return fetch(url).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }\r\n\r\n    export const getGlobalHistoricalDataByPeriod  = (period: number)=>{\r\n        let url : string = URL_HIST_DATA+'/all' + (period? '?lastdays='+period : '');\r\n        return fetch(url).then((data)=>{\r\n            return data.json();\r\n        })\r\n    }","import { JsonConvert, ValueCheckingMode } from \"json2typescript\";\r\n\r\nexport const WS_ISO2 = \"EH\";\r\n\r\nexport const jsonConvert = (): JsonConvert => {\r\n    let jsonConvert: JsonConvert = new JsonConvert();\r\n    jsonConvert.ignorePrimitiveChecks = false;\r\n    jsonConvert.valueCheckingMode = ValueCheckingMode.ALLOW_NULL;\r\n    return jsonConvert;\r\n};","import * as React from \"react\"\r\nimport \"./footer.css\";\r\nexport class Footer extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    <i className=\"fa fa-github-square\" aria-hidden=\"true\"></i>\r\n                    <a\r\n                        href=\"https://github.com/ahmedElmaghr/coronaMap.git\"\r\n                        className=\"github-link\"\r\n                        style={{ color: \"white\" }}\r\n                    >\r\n                        {\" \"}\r\n                        github repository\r\n                    </a>\r\n                </div>\r\n                <div className=\"version\">\r\n                    v_1.0.0\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport './navbar.css'\r\nconst Navbar = () => {\r\n    return (\r\n        <>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fa fa-home\" aria-hidden=\"true\"></i>\r\n                                {\" \"} Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/stat\" className=\"nav-link\">\r\n                            <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Countries\r\n                        </NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/charts\" className=\"nav-link\">\r\n                            <i className=\"fa fa-line-chart\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Charts\r\n                        </NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item \">\r\n                        <NavLink to=\"/map\" className=\"nav-link\">\r\n                            <i className=\"fa fa-map\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Map\r\n                        </NavLink>\r\n                        </li>\r\n                        {/* <li className=\"nav-item \">\r\n                        <NavLink to=\"/about\" className=\"nav-link\" style={{position:'absolute',right:'0%'}}>\r\n                            <i className=\"fa fa-info\" aria-hidden=\"true\"></i>\r\n                            {\" \"} About\r\n                        </NavLink>\r\n                        </li> */}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            {/* <div>\r\n                <ul className=\"topnav\">\r\n                    <li>\r\n                        <NavLink to=\"/\">\r\n                            <i className=\"fa fa-home\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Home\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/stat\">\r\n                            <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Countries\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/charts\">\r\n                            <i className=\"fa fa-line-chart\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Charts\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/map\">\r\n                            <i className=\"fa fa-map\" aria-hidden=\"true\"></i>\r\n                            {\" \"} Map\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className='about'>\r\n                        <NavLink to=\"/about\">\r\n                            <i className=\"fa fa-info\" aria-hidden=\"true\"></i>\r\n                            {\" \"} About\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div> */}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import * as React from \"react\"\r\nimport Navbar from \"../../components/navBar/navbar\"\r\nimport { NextPrevious } from \"../../components/nextPrevious/nextPrevious\"\r\n\r\nexport class Header extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"header\">\r\n                    {/*to improve navbar https://mui.com/components/app-bar/ */}\r\n                    <Navbar/>\r\n                    {/* <NextPrevious clickPrevious={()=>{console.log(\"click previous\")}} clickNext={()=>{console.log(\"click next\")}} /> */}\r\n                    <div>covid19 worldwide <i className=\"fa fa-globe\" aria-hidden=\"true\"></i></div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","\r\n\r\nexport const About =()=>{\r\n\r\n    return (\r\n        <div>\r\n            About section.\r\n        </div>\r\n        )\r\n}","export const formatEpochDateToDate = (epoch: number) => {\r\n  var d = new Date(epoch);\r\n  return d.toUTCString();\r\n};\r\n","  //verify string not empty\r\n  const isNotEmpty = entity => {\r\n   return entity != \"\" && entity != null;\r\n   //    return entity != null && entity.trim() != \"\";\r\n\r\n  };\r\n\r\n  //\r\n  const deleteSpecialChar = (string)=>{\r\n    if(typeof string != \"string\"){\r\n      throw \"formatStringToNumber is applied only on string format\"\r\n    }\r\n    var splitted = string.split(`,`).join('');\r\n\r\n    return splitted;\r\n  }\r\n\r\n  const stringVirSepToNumber = (string)=>{\r\n    var stringWithoutSpecChar = deleteSpecialChar(string);\r\n    return parseInt(stringWithoutSpecChar,10);\r\n  }\r\n\r\n  const formatNumberToString = (num) =>{\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n\r\nexport default { isNotEmpty,deleteSpecialChar,stringVirSepToNumber,formatNumberToString};","\r\nimport React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport StringUtils from './StringUtils';\r\n\r\n/** example \"16.25\" -> 16,25 + counter  */\r\nconst buildCountUpByStringValue = (value)=>{\r\n    return (\r\n      <CountUp\r\n        separator=\" \"\r\n        end={value}\r\n        duration={1.5}\r\n      ></CountUp>\r\n    );\r\n  }\r\n\r\nconst   calculateRadius = (d, context) => {\r\n  let cases;\r\n  if (context.checkToggleBTn) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.deaths);\r\n    return getRadiusDeath(cases)\r\n  } else if (context.checkZoneDesease) {\r\n    cases = StringUtils.deleteSpecialChar(d.stat.cases);\r\n    return getRadiusCases(cases)\r\n  }\r\n};\r\n\r\nconst getRadiusCases = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 10;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 10000) {\r\n    let r = (cases / 10000) * 20;\r\n    rayon = r;\r\n  } else if (10000 <= cases && cases < 60000) {\r\n    let r = (cases / 50000) * 50;\r\n    rayon = r;\r\n  }else if (60000 <= cases && cases < 100000) {\r\n    let r = (cases / 100000) * 60;\r\n    rayon = r;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nconst getRadiusDeath = (cases)=>{\r\n  let rayon = 0;\r\n  if (0 <= cases && cases < 1000) {\r\n    let r = (cases / 1000) * 5;\r\n    rayon = r;\r\n  } else if (1000 <= cases && cases < 2000) {\r\n    let r = (cases / 2000) * 20;\r\n    rayon = r;\r\n  } else if (2000 <= cases && cases < 5000) {\r\n    let r = (cases / 5000) * 22;\r\n    rayon = r;\r\n  } else if (5000 <= cases && cases < 15000) {\r\n    let r = (cases / 5000) * 25;\r\n    rayon = r;\r\n  }else{\r\n    rayon = 30;\r\n  }\r\n  \r\n  return rayon < 1 && rayon > 0 ? 2 : rayon;\r\n}\r\n\r\nexport default{buildCountUpByStringValue,calculateRadius}","\r\nimport React, { Component } from \"react\";\r\nimport uihelper from \"../../utils/UIHelper\";\r\nimport \"./Cards.css\";\r\n\r\ninterface Props {\r\n    title: string;\r\n    titleStyle: string;\r\n    contentStyle: string;\r\n    icon: string;\r\n    value: number;\r\n    updated : string\r\n}\r\nexport default class Card extends Component<Props, Readonly<{}>> {\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className={\"red-content\"}>{uihelper.buildCountUpByStringValue(this.props.value)}</div>\r\n                <div className={\"black-title\"}> {/*<i className={this.props.icon} aria-hidden=\"true\"></i>*/} {this.props.title}</div>\r\n                <div className=\"card-updated\">Last update: {this.props.updated}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport { formatEpochDateToDate } from \"../../utils/dateUtils\";\r\nimport Card from \"./Card\";\r\nimport \"./Cards.css\";\r\n\r\ninterface Props {\r\n  totalInfo: TotalInfo;\r\n}\r\nexport default class Cards extends Component<Props, Readonly<{}>> {\r\n  render() {\r\n    const { totalInfo } = this.props;\r\n\r\n\r\n    let totalConfirmed = totalInfo.cases;\r\n    let activeCases = totalInfo.todayCases;\r\n    let recovered = totalInfo.todayRecovered;\r\n    let totalDeaths = totalInfo.deaths;\r\n    let updated = totalInfo.updated;\r\n    //\r\n    return (\r\n      <>\r\n        <div className=\"col-8 group-card-left\">\r\n          <Card\r\n            title=\"Confirmed cases\"\r\n            contentStyle=\"red-content\"\r\n            icon=\"fa fa-globe\"\r\n            titleStyle=\"red-title\"\r\n            value={totalConfirmed}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n          <Card\r\n            title=\"Daily cases\"\r\n            contentStyle=\"orange-content\"\r\n            icon=\"fa fa-ambulance\"\r\n            titleStyle=\"orange-title\"\r\n            value={activeCases}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n        </div>\r\n        <div className=\"col-8 group-card-right\">\r\n          <Card\r\n            title=\"Confirmed deaths\"\r\n            contentStyle=\"black-content\"\r\n            icon=\"fa fa-heartbeat\"\r\n            titleStyle=\"black-title\"\r\n            value={totalDeaths}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n\r\n          <Card\r\n            title=\"Daily recovered\"\r\n            contentStyle=\"green-content\"\r\n            icon=\"fa fa-heart\"\r\n            titleStyle=\"green-title\"\r\n            value={recovered}\r\n            updated={formatEpochDateToDate(updated)}\r\n          />\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/world-map-covid19.017f78b5.jpg\";","import * as React from \"react\";\r\nimport Cards from \"../../components/card/Cards\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport './home.css';\r\nimport mapImage from '../../assets/images/world-map-covid19.jpg';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n  display: boolean;\r\n}\r\nexport class Home extends React.Component<Props, State>{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: false\r\n    }\r\n  }\r\n\r\n  getPieData = (data: TotalInfo) => {\r\n    if (data) {\r\n      let totalCases = data.cases;\r\n      let totalRecovered = data.recovered;\r\n      let totalDeaths = data.deaths;\r\n      return [totalRecovered, totalCases, totalDeaths];\r\n    } else {\r\n      return [0];\r\n    }\r\n  };\r\n  handleMapLinkMouseEnter = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      display: true\r\n    })\r\n  }\r\n  handleMapLinkMouseLeave = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      display: false\r\n    })\r\n  }\r\n  render() {\r\n\r\n    let pieData;\r\n    pieData = this.getPieData(this.props.totalInfo);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"home\">\r\n          <div className=\"row\" style={{display:\"flex\"}}>\r\n            <div className=\"col-8\" style={{ flex: 1, textAlign: \"center\" }}></div>\r\n            <div className=\"col-8\" style={{ flex: 1, textAlign: \"center\" }}>\r\n            <Link to=\"/stat\" className=\"link\">Dasboard view →</Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 panels\">\r\n              <Cards\r\n                totalInfo={this.props.totalInfo}\r\n              ></Cards>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\" style={{ display: \"flex\" }}>\r\n            <div className=\"col-8\" style={{ flex: 1 }}>\r\n            </div>\r\n            <div className=\"col-8\" style={{ flex: 1, textAlign: \"center\" }}>\r\n              <NavLink to=\"/map\" className=\"link\">Interactive maps view →</NavLink>\r\n              <div className=\"fill\" onMouseEnter={() => this.handleMapLinkMouseEnter()} onMouseLeave={() => this.handleMapLinkMouseLeave()} >\r\n                <NavLink to=\"/map\">\r\n                  <img src={mapImage} alt=\"\" style={{ opacity: this.state.display ? 1 : 0.6 }} />\r\n                </NavLink>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n{/* <div\r\n            className=\"row pie-container\">\r\n            <div className=\"pie\">\r\n              <PieChartFullOption\r\n                data={[\r\n                  { title: \"Recovered\", value: parseInt(pieData[0]), color: \"rgb(44, 100, 6)\" },\r\n                  { title: \"Cases\", value: parseInt(pieData[1]), color: \"rgb(201, 93, 22)\" },\r\n                  { title: \"Deaths\", value: parseInt(pieData[2]), color: \"rgb(0, 0, 0)\" },\r\n                ]}\r\n              />\r\n            </div>\r\n          </div> */}","import React, { useEffect, useState } from \"react\";\r\nimport { feature } from \"topojson-client\";\r\nimport countries110 from \"../../countries-110m.json\";\r\n\r\nconst withTopologicalData = (WrappedComponent) => (props) => {\r\n  const [worldData, setWorldData] = useState([]);\r\n  const [jsonData, setJsonData] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n    setWorldData(feature(countries110, countries110.objects.countries).features);\r\n    setJsonData(countries110);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {(Object.keys(jsonData).length != 0 && props.covid19)  &&\r\n        <WrappedComponent\r\n          worldData={worldData}\r\n          jsonData={jsonData}\r\n          covid19={props.covid19}\r\n          initGlobalStat={props.initGlobalStat}\r\n        ></WrappedComponent>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withTopologicalData;\r\n","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport \"./Legend.css\";\r\n\r\nexport default class Legend extends Component {\r\n  componentDidMount() {\r\n    var svg = d3.select(\"#legend\")\r\n    // Handmade legend\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",0).attr('width', 12).attr('height', 20).style(\"fill\", \"#ffedc1\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",20).attr('width', 12).attr('height', 20).style(\"fill\", \"#95DCF4\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",40).attr('width', 12).attr('height', 20).style(\"fill\", \"#54CBF2\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",60).attr('width', 12).attr('height', 20).style(\"fill\", \"#00ACE3\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",80).attr('width', 12).attr('height', 20).style(\"fill\", \"#008EBC\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",100).attr('width', 12).attr('height', 20).style(\"fill\", \"#007092\")\r\n    svg.append(\"rect\").attr(\"x\",4).attr(\"y\",120).attr('width', 12).attr('height', 15).style(\"fill\", \"#B6B6B6\")\r\n\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 10).text(\"0\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 30).text(\"1 - 10\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 50).text(\"11 - 100\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 70).text(\"101 - 1000\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 90).text(\"1 001 - 10 000\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 110).text(\"> 10 000\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n    svg.append(\"text\").attr(\"x\", 30).attr(\"y\", 130).text(\"Not Applicable\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"legend\" style = {{height:'30%',width:'15%',zIndex:1}}>\r\n        <svg  id = \"legend\" style = {{height:'100%',width:'100%'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport StringUtils from \"../../utils/StringUtils\";\r\nimport \"./Panel.css\";\r\n\r\nexport default class Panel extends React.Component {\r\n  \r\n  componentWillMount(){\r\n    document.addEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"click\",this.handleClick,false)\r\n  }\r\n\r\n  handleClick=(e)=>{\r\n    if(this.node.contains(e.target)){\r\n      return;\r\n    }\r\n    this.handleClickOutside(e)\r\n  }\r\n\r\n  handleClickOutside=(e)=>{\r\n    if(e.target.tagName!==\"path\" && e.target.tagName!==\"circle\"){\r\n      this.props.closePanel();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render panel\")\r\n    console.log(this.props);\r\n    let { stat, opacity,zIndex, x, y } = this.props;\r\n    return (\r\n      <div ref={(node) => (this.node = node)}>\r\n        <div\r\n          id=\"panelStat\"\r\n          className=\"mapboxgl-popup mapboxgl-popup-anchor-bottom\"\r\n          style={{\r\n            top: y + \"px\",\r\n            left: x + \"px\",\r\n            opacity: opacity,\r\n            zIndex: zIndex,\r\n          }}\r\n        >\r\n          <div className=\"mapboxgl-popup-tip\"></div>\r\n          <div className=\"mapboxgl-popup-content\">\r\n            <div\r\n              className=\"maphub-popup-inner maphub-popup-text ps\"\r\n              style={{ maxHeight: 411 + \"px\", maxWidth: 840 + \"px\" }}\r\n            >\r\n              <span\r\n                className=\"closePanel\"\r\n                onClick={() => {\r\n                  this.props.closePanel();\r\n                }}\r\n              >\r\n                X\r\n              </span>\r\n              <div className=\"nicetext\">\r\n                <div>\r\n                  <div className=\"nicetext-title panelTitle1\">\r\n                    <img className = \"impFlag\"src={stat?(stat.countryInfo? stat.countryInfo.flag : \"\") : \"\"}/>\r\n                    {\" \"}\r\n                    <span>{stat ? stat.country : \"\"}</span>\r\n                    \r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"panelTitle2\">Daily news</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"New recovered\",\r\n                    \"todayRecovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"New cases\",\r\n                    \"todayCases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkred\",\r\n                    \"New deaths\",\r\n                    \"todayDeaths\"\r\n                  )}\r\n                  <p className=\"panelTitle2\">Total</p>\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"green\",\r\n                    \"Total recovered\",\r\n                    \"recovered\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total deaths\",\r\n                    \"deaths\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"darkorange\",\r\n                    \"Total cases\",\r\n                    \"cases\"\r\n                  )}\r\n                  {this.getPanelParagraph(\r\n                    stat,\r\n                    \"black\",\r\n                    \"Total tests\",\r\n                    \"tests\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-x\"\r\n                style={{ left: 0 + \"px\", top: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-x\"\r\n                  tabIndex=\"0\"\r\n                  style={{ left: 0 + \"px\", width: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n              <div\r\n                className=\"ps__rail-y\"\r\n                style={{ top: 0 + \"px\", right: 0 + \"px\" }}\r\n              >\r\n                <div\r\n                  className=\"ps__thumb-y\"\r\n                  tabIndex=\"0\"\r\n                  style={{ top: 0 + \"px\", height: 0 + \"px\" }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getPanelParagraph = (stat,color,label,field)=>{\r\n    return <p\r\n    style={{\r\n      color,\r\n       //borderTop: \"solid 1px\",\r\n      margin: \"2px 2px 2px 2px\",\r\n       //borderRadius: 6 + \"px\",\r\n      fontSize: 12+'px',\r\n      fontWeight: 'bold'\r\n    }}\r\n  >\r\n    \r\n    {label + \": \"}\r\n    {(stat && StringUtils.isNotEmpty(stat[field])) ? StringUtils.formatNumberToString(stat[field]) : \"0\"}\r\n\r\n  </p>\r\n  }\r\n}\r\n","\r\nconst constructData = (pays, statCovid19) => {\r\n    var result = [];\r\n    var i = 0;\r\n    pays.forEach((d) => {\r\n        var coordinate = {\r\n            longitude: d.longitude,\r\n            latitude: d.latitude\r\n        };\r\n\r\n        var object = {\r\n            id: i,\r\n            coordinate,\r\n            data: d,\r\n            stat: getStatByPays(d, statCovid19)\r\n        }\r\n        result.push(object);\r\n        i++;\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\nconst getStatByPays = (d, covid19) => {\r\n    let variable = covid19.filter(world => {\r\n        let countryTrimmed = world.country ? world.country.trim() : \"\";\r\n        return countryTrimmed === d.name\r\n    })\r\n    let countryData = variable[0];\r\n    if (countryData) {\r\n        return countryData\r\n    } else {\r\n        return {\r\n            country: d.name\r\n        };\r\n    }\r\n}\r\nexport default { constructData, getStatByPays };","import * as d3 from \"d3\";\r\nimport React, { Component, PureComponent } from \"react\";\r\nimport { merge } from \"topojson-client\";\r\nimport withTopologicalData from \"../../hoc/withTopologicalData\";\r\nimport \"./CoronaMapViewCss.css\";\r\nimport Legend from \"./Legend.js\";\r\nimport Panel from \"../../panelchart/Panel\";\r\nimport DataHelper from \"../../../utils/DataHelper\";\r\n\r\nclass CoronaMapView extends Component {\r\n  //Constantes\r\n\r\n  width = \"100%\";\r\n  height = \"100%\";\r\n  viewBox = `0 0 800 400`;\r\n  borderColor = \"blue\";\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= \r\n                { panelInfo: \r\n                  {\r\n                    opacity:0,\r\n                    zIndex:0,\r\n                    stat:{},\r\n                    x:0,\r\n                    y:0\r\n                  } \r\n                };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.jsonData.length != 0) {\r\n      //Draw svg Wrapper\r\n      var svg = this.drawSvgWrapper();\r\n      var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n      //Draw Path from worldData\r\n      var g = this.drawMap(gGlobal, this.props.worldData);\r\n      //Merge morrocan sahara\r\n      this.mergeMorrocanSahara(g);\r\n      //country names\r\n      this.addCountriesName(g,this.props.worldData);\r\n      //add zoom\r\n      var wrapper = d3.select(\"#content\");\r\n      this.addZoom(wrapper);\r\n    }\r\n  }\r\n\r\n  mergeMorrocanSahara = g => {\r\n    //merge Morocco\r\n    var jsonData = this.props.jsonData;\r\n    //Moroccan Sahara id = 732\r\n    //Morocco id = 504\r\n    var morocco = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 504\r\n    );\r\n    var morrocanSahara = jsonData.objects.countries.geometries.filter(\r\n      d => d.id == 732\r\n    );\r\n    var toBeMerged = [morocco[0], morrocanSahara[0]];\r\n    //\r\n    g.append(\"path\")\r\n      .datum(merge(jsonData, toBeMerged))\r\n      .attr(\"class\", \"country\")\r\n      .attr(\"d\", d => this.calculatePath(d))\r\n      .attr(\"fill\", this.getMoroccoCountryColor(this.props.covid19))\r\n      .on(\"click\", (d) => {\r\n        this.clickOnCountry()\r\n      })\r\n  };\r\n\r\n   getMoroccoCountryColor = (data) => {\r\n    const moroccoData = data.filter(c => c.country == \"Morocco\");\r\n    let morrocanTodayCases = moroccoData[0].todayCases;\r\n    return this.getCountryColor(morrocanTodayCases); \r\n   }\r\n\r\n   addCountriesName = (g, worldData) => {\r\n    g.selectAll(\".place-label\")\r\n      .data(worldData)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"place-label\")\r\n      .attr(\"x\", (d) => {\r\n        return this.path().centroid(d)[0];\r\n      })\r\n      .attr(\"y\", (d) => {\r\n        return this.path().centroid(d)[1];\r\n      })\r\n      .text((d) => {\r\n        return d.properties.name;\r\n      });\r\n  };\r\n\r\n  clickOnCountry = d => {\r\n    let panelStat = {};\r\n    let covid19 = this.props.covid19;\r\n    if (d) {\r\n      panelStat = DataHelper.getStatByPays({ name: d.properties.name }, covid19);\r\n    } else {\r\n      panelStat = DataHelper.getStatByPays({ name: \"Morocco\" }, covid19);\r\n    }\r\n    let panelPosition = this.getPositionPanel();\r\n    this.setState((prevState) => {\r\n      return {\r\n        panelInfo: {\r\n          opacity: 0.9,\r\n          zIndex: 1,\r\n          stat: panelStat,\r\n          x: panelPosition.x,\r\n          y: panelPosition.y,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  getPositionPanel = () => {\r\n    let panelStatDim = d3.selectAll(\"#panelStat\").node().getBoundingClientRect();\r\n    let headerDim = d3.selectAll(\"#header\").node().getBoundingClientRect();\r\n    let x = d3.event.pageX - (panelStatDim.width / 2);\r\n    let y = d3.event.pageY - panelStatDim.height - headerDim.height;\r\n    return { x, y };\r\n  }\r\n  handleMouseOut = () => {\r\n    this.closePanelDetails();\r\n  }\r\n\r\n  closePanelDetails = () => {\r\n    this.setState(prevState =>{\r\n      return {\r\n        panelInfo: {\r\n          ...prevState.panelInfo,\r\n          opacity: 0,\r\n          zIndex: -1,\r\n        },\r\n      }\r\n    });\r\n    this.props.initGlobalStat();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      //map is drew by d3 using id mapWW (map World wide)\r\n      <div id=\"mapWW\" className=\"col\" style={{ height: window.screen.height + \"px\" }}>\r\n      <Legend/>\r\n      <Panel\r\n            opacity={this.state.panelInfo.opacity}\r\n            zIndex={this.state.panelInfo.zIndex}\r\n            stat={this.state.panelInfo.stat}\r\n            x={this.state.panelInfo.x}\r\n            y={this.state.panelInfo.y}\r\n            closePanel={() => {\r\n              this.closePanelDetails();\r\n            }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  //Draw svg wrapper for map\r\n  drawSvgWrapper() {\r\n    //Construct Body\r\n    var body = d3.select(\"#mapWW\")\r\n    //Construct SVG\r\n    var svg = body\r\n      .append(\"svg\")\r\n      .attr(\"class\", \"svg\")\r\n      .attr(\"id\", \"content\")\r\n      .attr(\"width\", this.width)\r\n      .attr(\"viewBox\", this.viewBox)\r\n      ;\r\n    return svg;\r\n  }\r\n\r\n  //Draw the world Map\r\n  drawMap = (node, worldData) => {\r\n      var g = node\r\n        .append(\"g\")\r\n        .attr(\"id\", \"worldMap\")\r\n        .attr(\"className\", \"countries\");\r\n      g.selectAll(\"path\")\r\n        .data(worldData)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"key\", (d, i) => `path-${i}`)\r\n        .attr(\"d\", d => this.calculatePath(d))\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"fill\", (d) => {\r\n          return this.markDesease(d)\r\n        })\r\n        .on(\"click\", (d) => {\r\n          this.clickOnCountry(d);\r\n        })\r\n      return g;\r\n\r\n  };\r\n\r\n  //Color land \r\n  markDesease = (d) => {\r\n    let elt = this.props.covid19.filter((e) => {\r\n      let countryTrimmed = e.country ? e.country.trim() : \"\";\r\n\r\n      return countryTrimmed == d.properties.name\r\n    })\r\n    if (elt[0]) {\r\n      let dailyNewCase = elt[0].todayCases;\r\n      return this.getCountryColor(dailyNewCase);\r\n\r\n    } else {\r\n      return `rgba(218, 223, 225, 1)`\r\n    }\r\n  }\r\n\r\n  //Get country color range rgba(255,255,255)\r\n  getCountryColor = (dailyCase) => {\r\n    if(dailyCase == 0){\r\n      return '#ffedc1'\r\n    } \r\n    else if (1 <= dailyCase && dailyCase <= 10) {\r\n      return '#95DCF4'\r\n    }\r\n    else if (11 <= dailyCase && dailyCase <= 100) {\r\n      return '#54CBF2'\r\n    }\r\n    else if (101 <= dailyCase && dailyCase < 1000) {\r\n      return '#00ACE3'\r\n    }\r\n    else if (1001 <= dailyCase && dailyCase < 10000) {\r\n      return '#008EBC'\r\n    }\r\n     else if (dailyCase >=10000 ) {\r\n      return '#007092'\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  //Add zoom\r\n  addZoom = svg => {\r\n    const map = d3.select(\".svg\");\r\n    const width = map.node().getBoundingClientRect().width;\r\n    const height = width / 3;\r\n\r\n    svg.call(d3.zoom()\r\n    .scaleExtent([1, 50])\r\n    .translateExtent([[0,0], [width, height]])\r\n    .extent([[0, 0], [width, height]])\r\n    .on(\"zoom\", () => {\r\n      // this.closePanelDetails();\r\n      this.zoomed(svg)\r\n    }));\r\n  };\r\n\r\n  zoomed = svg => {\r\n    var transform = d3.event.transform;\r\n    svg.selectAll(\"path,.place-label\").attr(\"transform\", transform);\r\n    var placeLabel = d3.selectAll(\".place-label\");\r\n\r\n  //Countries label Transformation\r\n  let k = transform.k;\r\n\r\n  if(k>=7 && k<10){\r\n    placeLabel\r\n    .style(\"font-size\", \"2px\")\r\n    .style(\"stroke-width\", \"0.05px\")\r\n    // .style(\"letter-spacing\", \"0px\")\r\n    .style(\"visibility\",\"visible\");\r\n  }else if(k>=10){\r\n    placeLabel\r\n    .style(\"font-size\", \"1px\")\r\n    .style(\"stroke-width\", \"0.005px\")\r\n    // .style(\"letter-spacing\", \"0px\")\r\n    .style(\"visibility\",\"visible\");\r\n  }\r\n  else{\r\n    placeLabel\r\n    .style(\"visibility\",\"hidden\");\r\n  }\r\n\r\n};\r\n\r\n  //Projection and path calculator\r\n  projection = () =>{\r\n    var geoMercator = d3\r\n      .geoMercator()\r\n      .center([0,-60])\r\n      .scale(80)\r\n      .translate([800 / 2, 650 / 2]);\r\n\r\n    var projection2 = d3\r\n      .geoOrthographic()\r\n      .center([0,-15])\r\n      .scale(190)\r\n      .precision(0.1);\r\n    var projection3 = d3\r\n      .geoConicEqualArea()\r\n      .scale(100)\r\n      .center([0, 150])\r\n      //.translate([width / 2, height / 2])\r\n      .precision(0.3);\r\n    return geoMercator;\r\n  }\r\n\r\n  calculatePath = d => {\r\n    return d3.geoPath().projection(this.projection())(d);\r\n  };\r\n\r\n  path = () => {\r\n    return d3.geoPath().projection(this.projection());\r\n  };\r\n}\r\nexport default withTopologicalData(CoronaMapView);","import * as React from \"react\";\r\nimport CoronaMapView from \"../../components/coronadash/mapD3/CoronaMapView\";\r\nimport { CountryDailyInfo } from \"../../models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport './page1.css';\r\n\r\n\r\ninterface Props {\r\n  dataset: CountryDailyInfo[];\r\n  totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n  countryClicked: any;\r\n}\r\nexport class Page1 extends React.Component<Props, State>{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryClicked: undefined,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n\r\n        <CoronaMapView\r\n          covid19={this.props.dataset}\r\n          onMouseMoveOverCountry={(d) => this.onMouseMoveOverCountry(d)}\r\n          initGlobalStat={() => {\r\n            this.initGlobalStat();\r\n          }}\r\n        />\r\n\r\n        {/* <Container\r\n            covid19={this.props.dataset}\r\n            onMouseMoveOverCountry={(d) => this.onMouseMoveOverCountry(d)}\r\n            initGlobalStat={() => {\r\n              this.initGlobalStat();\r\n            }}\r\n          ></Container> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onMouseMoveOverCountry = (d) => {\r\n    var dataset = this.props.dataset;\r\n    var countryFiltered;\r\n    if (!d) {\r\n      countryFiltered = dataset.filter((elt) => {\r\n        return elt.country == \"Morocco\";\r\n      })\r\n    } else {\r\n      countryFiltered = dataset.filter((elt) => {\r\n        return elt.country == d.properties.name;\r\n      })\r\n    }\r\n    this.setState({\r\n      countryClicked: countryFiltered[0]\r\n    })\r\n  }\r\n\r\n\r\n  initGlobalStat = () => {\r\n    this.setState({\r\n      countryClicked: undefined\r\n    })\r\n  }\r\n}","export const columnsSchema = [\r\n    {\r\n      field: \"countryInfo\",\r\n      headerName: \"ID\",\r\n      width: 50,\r\n      valueGetter: (params) => `${params.row.countryInfo.iso3}`,\r\n    },\r\n    { field: \"country\", headerName: \"Country name\", width: 150 },\r\n    { field: \"continent\", headerName: \"Continent\", width: 130 },\r\n    {\r\n      field: \"cases\",\r\n      headerName: \"Total cases\",\r\n      width: 150,\r\n      editable: false,\r\n    },\r\n    {\r\n      field: \"todayCases\",\r\n      headerName: \"Today cases\",\r\n      width: 120,\r\n      editable: false,\r\n    },\r\n    {\r\n      field: \"todayDeaths\",\r\n      headerName: \"Today deaths\",\r\n      description: \"\",\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"deaths\",\r\n      headerName: \"Total deaths\",\r\n      type: \"number\",\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"todayRecovered\",\r\n      headerName: \"Today recovered\",\r\n      sortable: true,\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"recovered\",\r\n      headerName: \"Total recovered\",\r\n      sortable: true,\r\n      width: 120,\r\n    },\r\n  ];","import { DataGrid } from '@mui/x-data-grid';\r\nimport * as React from 'react';\r\nimport { CountryDailyInfo } from '../../models/CountryDailyInfo';\r\nimport './DataTable.css';\r\nimport { columnsSchema } from './schema/schema';\r\n\r\ninterface Props{\r\n  data: CountryDailyInfo[];\r\n}\r\ninterface State{\r\n  headerHeight : any;\r\n}\r\n\r\n\r\n\r\nexport class DataTable extends React.Component<Props,State>{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      headerHeight : 0\r\n    }\r\n  }\r\n  componentDidMount(){\r\n      //TODO not a reactjs way to get element\r\n      var element = document.getElementById(\"header\");\r\n      let headerHeight =  element? element.offsetHeight : 0;\r\n    this.setState({ headerHeight: `calc(95vh - ${headerHeight}px)`})\r\n  }\r\n  render(){\r\n    return (\r\n      <div className='data-table' style={{height: this.state.headerHeight}}>\r\n        <DataGrid\r\n          rows={this.props.data}\r\n          columns={columnsSchema}\r\n          pageSize={20}\r\n          rowsPerPageOptions={[5]}\r\n          checkboxSelection\r\n          disableSelectionOnClick\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { JsonConvert } from \"json2typescript\";\r\nimport * as React from \"react\";\r\nimport { CountryDailyInfo } from \"../../models/CountryDailyInfo\";\r\nimport { DataTable } from \"../../components/table/DataTable\";\r\n\r\ninterface Props {\r\n    dataset : CountryDailyInfo[];\r\n}\r\nexport class Page2 extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n          let jsonConvert: JsonConvert = new JsonConvert();\r\n          let coutriesDailyinfo : CountryDailyInfo[] = jsonConvert.deserializeArray(this.props.dataset, CountryDailyInfo);\r\n        return (\r\n            <div>\r\n                <DataTable data={coutriesDailyinfo}></DataTable>\r\n            </div>\r\n        )\r\n    }\r\n}","import {\r\n    BarElement,\r\n    CategoryScale, Chart as ChartJS, Legend, LinearScale, Title,\r\n    Tooltip\r\n} from 'chart.js';\r\nimport * as React from \"react\";\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\ninterface Props {\r\n    options: any;\r\n    data: any;\r\n}\r\nexport class BarChart extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className='graph'>\r\n                    <Bar\r\n                        {...this.props}\r\n                    />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport { format, endOfToday, set } from \"date-fns\";\r\nimport { BarChart } from \"../../components/barChart/BarChart\";\r\nimport { TimeRangePicker } from \"../../components/timeRange/TimeRangePicker\";\r\nimport { SelectRange } from \"../../components/select/Select\";\r\nimport { SelectOptions } from \"../../dto/selectOptions\";\r\nimport { HistoricalCountry } from '../../models/historical/HistoricalCountry';\r\nimport { getHistoricalDataByCountryAndPeriod } from '../../services/covidNinja/NinjaService';\r\nimport { jsonConvert } from '../../utils/Constants';\r\nimport './Page3.css';\r\nimport Loading from \"../../components/loading/loading\";\r\n\r\n//TODO to be exported in an external ts util file\r\nconst firstCovidDate = new Date(2019, 10, 1, 0, 0, 0, 0);\r\nconst now = new Date()\r\nconst getTodayAtSpecificHour = (hour = 12) =>\r\n    set(now, { hours: hour, minutes: 0, seconds: 0, milliseconds: 0 });\r\n\r\nconst selectedStartInit = new Date(2021, 0, 25, 0, 0, 0, 0);\r\nconst selectedEndInit = new Date();\r\n\r\nconst startTime = firstCovidDate;\r\nconst endTime = new Date();\r\n//\r\ninterface State {\r\n    countryHistoricalData: HistoricalCountry;\r\n    selectedInterval: [Date, Date];\r\n    isDataLoaded: boolean;\r\n}\r\ninterface Props {\r\n    countriesRef: SelectOptions[];\r\n}\r\nenum DailyNewsTypes {\r\n    DEATHS = \"deaths\",\r\n    CASES = \"cases\",\r\n    RECOVERED = \"recovered\"\r\n}\r\nexport class Page3 extends React.Component<Props, State>{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countryHistoricalData: new HistoricalCountry(),\r\n            isDataLoaded: false,\r\n            selectedInterval: [selectedStartInit, selectedEndInit]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let interval = 365 * 3;\r\n        this.setState({ isDataLoaded: false }, () => {\r\n            getHistoricalDataByCountryAndPeriod('ma', interval).then((response) => {\r\n                let countryHistoricalData: HistoricalCountry = jsonConvert().deserializeObject(response, HistoricalCountry);\r\n                this.setState({\r\n                    ...this.state,\r\n                    countryHistoricalData: countryHistoricalData,\r\n                    isDataLoaded: true\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getOptions = (graphTitle: string) => {\r\n        return {\r\n            responsive: true,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top' as const,\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: graphTitle,\r\n                },\r\n            },\r\n        };\r\n    };\r\n\r\n\r\n    getLabels = () => {\r\n        //period\r\n        let startDate = this.state.selectedInterval[0];\r\n        let endDate = this.state.selectedInterval[1];\r\n        //data\r\n        let data: HistoricalCountry = this.state.countryHistoricalData;\r\n        let casesAsMAp = new Map(Object.entries(data.timeline.cases));\r\n\r\n        let labels = [...casesAsMAp.keys()].filter(it => {\r\n            let itAsDate = new Date(it);\r\n            return (itAsDate >= startDate && itAsDate <= endDate)\r\n        });\r\n        return labels;\r\n    }\r\n\r\n    getDailyDataByType = (_x: DailyNewsTypes) => {\r\n        //period \r\n        let startDate = this.state.selectedInterval[0];\r\n        let endDate = this.state.selectedInterval[1];\r\n        //country hist data\r\n        let countryHistData: HistoricalCountry = this.state.countryHistoricalData;\r\n        let countryDailyDataAsMap = new Map(Object.entries(countryHistData.timeline[_x]));\r\n        let countryDailyDataByPeriod = [...countryDailyDataAsMap].filter(it => {\r\n            let itAsDate = new Date(it[0]);\r\n            return (itAsDate >= startDate && itAsDate <= endDate)\r\n        })\r\n        let countryDailyData = countryDailyDataByPeriod.map((it) => it[1]);\r\n        //TODO\r\n        let countryDataPerDay = countryDailyData.map((v, i, array) => {\r\n            return i > 0 ? Math.abs(v - array[i - 1]) : 0;\r\n        })\r\n\r\n\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: (_x == DailyNewsTypes.CASES ? 'cases' : 'deaths'),\r\n                    data: countryDataPerDay,//valuePerDay\r\n                    borderColor: (_x == DailyNewsTypes.CASES ? 'rgb(255, 99, 132)' : 'rgb(53, 162, 235)'),\r\n                    backgroundColor: (_x == DailyNewsTypes.CASES ? 'rgba(255, 99, 132, 0.5)' : 'rgba(53, 162, 235, 0.5)'),\r\n                }\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n\r\n    getTotalDataByType = (_x: DailyNewsTypes) => {\r\n        let countryHistData: HistoricalCountry = this.state.countryHistoricalData;\r\n        let countryDeathsAsMap = new Map(Object.entries(countryHistData.timeline[_x]));\r\n        let countryDeathsValues = [...countryDeathsAsMap.values()];\r\n\r\n        let data = {\r\n            labels: this.getLabels(),\r\n            datasets: [\r\n                {\r\n                    label: 'country total ' + (_x == DailyNewsTypes.DEATHS ? 'deaths' : 'cases') + ' per day',\r\n                    data: countryDeathsValues,//maValuePerDay\r\n                    borderColor: (_x == DailyNewsTypes.DEATHS ? 'rgb(53, 162, 235)' : 'rgb(255, 99, 132)'),\r\n                    backgroundColor: (_x == DailyNewsTypes.DEATHS ? 'rgba(53, 162, 235, 0.5)' : 'rgba(255, 99, 132, 0.5)'),\r\n                },\r\n            ],\r\n        };\r\n        return data;\r\n    }\r\n    handleChangeSelect = (e: SelectOptions) => {\r\n        let interval = 365 * 3;\r\n        this.setState({ isDataLoaded: false }, () => {\r\n            getHistoricalDataByCountryAndPeriod(e.value, interval).then((response) => {\r\n                let countryHistoricalData: HistoricalCountry = jsonConvert().deserializeObject(response, HistoricalCountry);\r\n                this.setState({\r\n                    ...this.state,\r\n                    countryHistoricalData,\r\n                    isDataLoaded: true\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    countDaysFromStartDay = (startDate: Date) => {\r\n        let date1: Date = new Date();\r\n        let timeInMilisec: number = date1.getTime() - startDate.getTime();\r\n        let daysBetweenDates: number = Math.ceil(timeInMilisec / (1000 * 60 * 60 * 24));\r\n        return daysBetweenDates;\r\n    }\r\n\r\n    updateTimeRange = (selectedInterval) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedInterval\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div className='container'>\r\n                <Loading active={!this.state.isDataLoaded}/>\r\n                <div className='row'>\r\n                    <div className=\"select\" >\r\n                        <SelectRange\r\n                            options={this.props.countriesRef}\r\n                            onChange={(e) => this.handleChangeSelect(e as SelectOptions)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country cases evolution\")} data={this.getDailyDataByType(DailyNewsTypes.CASES)} />\r\n                    </div>\r\n                    <div className='col-6'>\r\n                        <BarChart options={this.getOptions(\"country deaths evolution\")} data={this.getDailyDataByType(DailyNewsTypes.DEATHS)} />\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <TimeRangePicker\r\n                        startTime={startTime}\r\n                        endTime={endTime}\r\n                        selectedInterval={this.state.selectedInterval}\r\n                        updateTimeRange={(e) => this.updateTimeRange(e)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { format, endOfToday, set } from \"date-fns\";\r\nimport * as React from \"react\";\r\nimport TimeRange from \"react-timeline-range-slider\";\r\nimport './time-range-picker.css';\r\n\r\nconst step = 86400000;//1 day in milliseconds\r\ninterface Props {\r\n    updateTimeRange: any;\r\n    startTime:Date;\r\n    endTime:Date;\r\n    selectedInterval:[Date,Date];\r\n}\r\n\r\ninterface State {\r\n    selectedInterval: [Date, Date];\r\n    error: boolean;\r\n}\r\n\r\n\r\nexport class TimeRangePicker extends React.Component<Props, State>{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...this.state,\r\n            selectedInterval:this.props.selectedInterval,\r\n            error: false,\r\n        }\r\n    }\r\n\r\n\r\n    errorHandler = ({ error }) => {\r\n        this.setState({ error })\r\n    };\r\n\r\n    onChangeCallback = (selectedInterval) => {\r\n        this.setState({ selectedInterval });\r\n        this.props.updateTimeRange(selectedInterval);\r\n    }\r\n    \r\n    formaTick = (ms: any) =>{\r\n        return format(new Date(ms), 'yy-MM-dd');\r\n    }\r\n\r\n    render() {\r\n        let disabledIntervals = [\r\n            { start: this.props.startTime, end: this.props.selectedInterval[0] },\r\n            { start: this.props.selectedInterval[1], end: this.props.endTime },\r\n        ]\r\n        return (<>\r\n            <div>\r\n                <TimeRange\r\n                    //containerClassName=\"toto2\"\r\n                    step={step}\r\n                    // ticksNumber={36}\r\n                    selectedInterval={this.props.selectedInterval}\r\n                    timelineInterval={[this.props.startTime, this.props.endTime]}\r\n                    onUpdateCallback={this.errorHandler}\r\n                    onChangeCallback={this.onChangeCallback}\r\n                    formatTick={(ms)=>{return this.formaTick(ms)}}\r\n                    disabledIntervals={disabledIntervals}\r\n                />\r\n            </div>\r\n            <div className=\"selected-interval\">\r\n                <span>Selected Interval: </span>\r\n                <span key={0}>{format(this.state.selectedInterval[0], \"dd MMM yyyy\")}</span>\r\n                {\" - \"}\r\n                <span key={1}>{format(this.state.selectedInterval[1], \"dd MMM yyyy\")}</span> \r\n            </div>\r\n        </>\r\n        )\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from 'react-select/animated';\r\nimport { SelectOptions } from \"../../dto/selectOptions\";\r\n\r\n\r\ninterface Props {\r\n    options: SelectOptions[];\r\n    onChange: any;\r\n}\r\nconst animatedComponents = makeAnimated();\r\n\r\nexport class SelectRange extends React.Component<Props, Readonly<{}>>{\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Select\r\n            closeMenuOnSelect={true}\r\n            components={animatedComponents}\r\n            //defaultValue={[colourOptions[4], colourOptions[5]]}\r\n            // isMulti\r\n            options={this.props.options}\r\n            onChange={(e) => this.props.onChange(e)} />\r\n        )\r\n    }\r\n}","import { JsonObject, JsonProperty } from \"json2typescript\";\r\n\r\n@JsonObject(\"timeline\")\r\nexport class Timeline {\r\n  @JsonProperty(\"cases\")\r\n  cases: Map<string, string>;\r\n  @JsonProperty(\"deaths\")\r\n  deaths: Map<string, string>;\r\n  @JsonProperty(\"recovered\")\r\n  recovered: Map<string, string>;\r\n\r\n  constructor() {\r\n    this.cases = new Map();\r\n    this.deaths = new Map();\r\n    this.recovered = new Map();\r\n  }\r\n}\r\n","import { JsonObject, JsonProperty } from \"json2typescript\";\r\nimport { Timeline } from \"./Timeline\";\r\n\r\n@JsonObject(\"HistoricalCountry\")\r\nexport class HistoricalCountry {\r\n\r\n    @JsonProperty(\"country\")\r\n    country : string;\r\n    @JsonProperty(\"province\")\r\n    province : Array<string>;\r\n    @JsonProperty(\"timeline\")\r\n    timeline : Timeline;\r\n\r\n\r\n\tconstructor() {\r\n        this.country = '';\r\n        this.province= [];\r\n        this.timeline= new Timeline();\r\n\t}\r\n\r\n}","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { CountryDailyInfo } from \"../../models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"../../models/TotalInfo\";\r\nimport { getTodayCovidData, getTodayTotalCovidData } from \"../../services/covidNinja/NinjaService\";\r\nimport { jsonConvert, WS_ISO2 } from \"../../utils/Constants\";\r\n\r\nexport const withDataLoader = (Component) => (props) => {\r\n\r\n  const [active, setActive] = useState(true);\r\n  const [allCoutriesDailyinfo, setAllCoutriesDailyinfo] = useState(new Array<CountryDailyInfo>());\r\n  const [totalInfo, setTotalInfo] = useState(new TotalInfo());\r\n  \r\n  \r\n  //add logic\r\n  useEffect(() => {\r\n    getTodayCovidData().then((response) => {\r\n      let allDataExceptWS = response.filter((d: CountryDailyInfo) => {\r\n        return d.countryInfo.iso2 !== WS_ISO2;\r\n      });\r\n      let allCoutriesDailyinfo: CountryDailyInfo[] = jsonConvert().deserializeArray(allDataExceptWS, CountryDailyInfo);\r\n      getTodayTotalCovidData().then((response) => {\r\n        let totalInfo: TotalInfo = jsonConvert().deserializeObject(response, TotalInfo);\r\n        setAllCoutriesDailyinfo(allCoutriesDailyinfo);\r\n        setTotalInfo(totalInfo);\r\n        setActive(false);\r\n      });\r\n    })\r\n  }, [active]);\r\n\r\n  return <Component active={active} allCoutriesDailyinfo={allCoutriesDailyinfo} totalInfo={totalInfo} />\r\n};\r\n","export class SelectOptions {\r\n  value: string;\r\n  label: string;\r\n\r\n  constructor(value:string,label:string) {\r\n    this.value = value;\r\n    this.label =label;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport { CountryDailyInfo } from \"../models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"../models/TotalInfo\";\r\nimport { About } from \"../pages/about/About\";\r\nimport { Home } from \"../pages/home/home\";\r\nimport { Page1 } from \"../pages/page1/Page1\";\r\nimport { Page2 } from \"../pages/page2/Page2\";\r\nimport { Page3 } from \"../pages/page3/Page3\";\r\nimport { getCountryFromDataset } from \"../utils/countries\";\r\n\r\ninterface Props {\r\n    dataset: CountryDailyInfo[];\r\n    totalInfo: TotalInfo;\r\n}\r\ninterface State {\r\n\r\n}\r\nexport class Navigation extends React.Component<Props, State> {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Routes>\r\n                    <Route\r\n                        path={\"/\"}\r\n                        element={\r\n                            <Home totalInfo={this.props.totalInfo}/>\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path={\"/map\"}\r\n                        element={\r\n                            <Page1 dataset={this.props.dataset} totalInfo={this.props.totalInfo} />\r\n                        }\r\n                    />\r\n                    <Route path={\"/stat\"} element={<Page2 dataset={this.props.dataset} />} />\r\n                    <Route path={\"/charts\"} element={<Page3 countriesRef={getCountryFromDataset(this.props.dataset)} />} />\r\n                    <Route path={\"/about\"} element={<About />} />\r\n                </Routes>\r\n            </>\r\n        )\r\n    }\r\n}","import { CountryDailyInfo } from \"../models/CountryDailyInfo\"\r\nimport { SelectOptions } from \"../dto/selectOptions\"\r\n\r\nexport const getCountryFromDataset = (dataset : CountryDailyInfo[])=>{\r\n        return dataset.map((elt : CountryDailyInfo)=>{\r\n            let label = elt.country;\r\n            let value = elt.countryInfo?.iso2;\r\n            return new SelectOptions(value,label);\r\n        })\r\n}","import React, { Component } from \"react\";\r\nimport Loading from './../src/components/loading/loading';\r\nimport \"./App.css\";\r\nimport { withDataLoader } from \"./components/hoc/withDataLoader\";\r\nimport { CountryDailyInfo } from \"./models/CountryDailyInfo\";\r\nimport { TotalInfo } from \"./models/TotalInfo\";\r\nimport { Footer } from \"./pages/footer/footer\";\r\nimport { Header } from \"./pages/header/header\";\r\nimport { Navigation } from \"./routes/navigation\";\r\n\r\ninterface Props{\r\n  active : boolean;\r\n  allCoutriesDailyinfo : CountryDailyInfo[];\r\n  totalInfo : TotalInfo;\r\n}\r\n\r\n class App extends Component<Props,Readonly<{}>> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div\r\n        className=\"container-fluid\"\r\n      >\r\n        <div id=\"header\" className=\"row\" style={{margin:0}}>\r\n          <Header />\r\n        </div>\r\n        <div className=\"main\">\r\n          <Loading active={this.props.active} />\r\n          <Navigation dataset={this.props.allCoutriesDailyinfo} totalInfo={this.props.totalInfo} />\r\n        </div>\r\n        <footer className=\"footer\">\r\n          <Footer />\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withDataLoader(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// window.screen.orientation.lock('landscape');\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter >\r\n            <App />\r\n        </HashRouter>\r\n    </React.StrictMode>\r\n, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}